/* automatically generated by rust-bindgen 0.57.0 */

pub type wchar_t = ::std::os::raw::c_ushort;
pub type int64 = ::std::os::raw::c_longlong;
pub type uint64 = ::std::os::raw::c_ulonglong;
pub type int32 = ::std::os::raw::c_int;
pub type uint32 = ::std::os::raw::c_uint;
pub type char16 = wchar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_wide_t {
    pub str_: *mut wchar_t,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str_: *mut wchar_t)>,
}
#[test]
fn bindgen_test_layout__cef_string_wide_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_string_wide_t>(),
        12usize,
        concat!("Size of: ", stringify!(_cef_string_wide_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_string_wide_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_string_wide_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_wide_t>())).str_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_wide_t),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_wide_t>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_wide_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_wide_t>())).dtor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_wide_t),
            "::",
            stringify!(dtor)
        )
    );
}
pub type cef_string_wide_t = _cef_string_wide_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_utf8_t {
    pub str_: *mut ::std::os::raw::c_char,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str_: *mut ::std::os::raw::c_char)>,
}
#[test]
fn bindgen_test_layout__cef_string_utf8_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_string_utf8_t>(),
        12usize,
        concat!("Size of: ", stringify!(_cef_string_utf8_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_string_utf8_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_string_utf8_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf8_t>())).str_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf8_t),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf8_t>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf8_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf8_t>())).dtor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf8_t),
            "::",
            stringify!(dtor)
        )
    );
}
pub type cef_string_utf8_t = _cef_string_utf8_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_utf16_t {
    pub str_: *mut char16,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str_: *mut char16)>,
}
#[test]
fn bindgen_test_layout__cef_string_utf16_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_string_utf16_t>(),
        12usize,
        concat!("Size of: ", stringify!(_cef_string_utf16_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_string_utf16_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_string_utf16_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf16_t>())).str_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf16_t),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf16_t>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf16_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_utf16_t>())).dtor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_utf16_t),
            "::",
            stringify!(dtor)
        )
    );
}
pub type cef_string_utf16_t = _cef_string_utf16_t;
extern "C" {
    #[doc = ""]
    pub fn cef_string_wide_set(
        src: *const wchar_t, src_len: usize, output: *mut cef_string_wide_t,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_set(
        src: *const ::std::os::raw::c_char, src_len: usize, output: *mut cef_string_utf8_t,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_set(
        src: *const char16, src_len: usize, output: *mut cef_string_utf16_t,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_wide_clear(str_: *mut cef_string_wide_t);
}
extern "C" {
    pub fn cef_string_utf8_clear(str_: *mut cef_string_utf8_t);
}
extern "C" {
    pub fn cef_string_utf16_clear(str_: *mut cef_string_utf16_t);
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_wide_cmp(
        str1: *const cef_string_wide_t, str2: *const cef_string_wide_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_cmp(
        str1: *const cef_string_utf8_t, str2: *const cef_string_utf8_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_cmp(
        str1: *const cef_string_utf16_t, str2: *const cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_wide_to_utf8(
        src: *const wchar_t, src_len: usize, output: *mut cef_string_utf8_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_to_wide(
        src: *const ::std::os::raw::c_char, src_len: usize, output: *mut cef_string_wide_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_wide_to_utf16(
        src: *const wchar_t, src_len: usize, output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_wide(
        src: *const char16, src_len: usize, output: *mut cef_string_wide_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_to_utf16(
        src: *const ::std::os::raw::c_char, src_len: usize, output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_utf8(
        src: *const char16, src_len: usize, output: *mut cef_string_utf8_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_ascii_to_wide(
        src: *const ::std::os::raw::c_char, src_len: usize, output: *mut cef_string_wide_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_ascii_to_utf16(
        src: *const ::std::os::raw::c_char, src_len: usize, output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
#[doc = ""]
pub type cef_string_userfree_wide_t = *mut cef_string_wide_t;
pub type cef_string_userfree_utf8_t = *mut cef_string_utf8_t;
pub type cef_string_userfree_utf16_t = *mut cef_string_utf16_t;
extern "C" {
    #[doc = ""]
    pub fn cef_string_userfree_wide_alloc() -> cef_string_userfree_wide_t;
}
extern "C" {
    pub fn cef_string_userfree_utf8_alloc() -> cef_string_userfree_utf8_t;
}
extern "C" {
    pub fn cef_string_userfree_utf16_alloc() -> cef_string_userfree_utf16_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_userfree_wide_free(str_: cef_string_userfree_wide_t);
}
extern "C" {
    pub fn cef_string_userfree_utf8_free(str_: cef_string_userfree_utf8_t);
}
extern "C" {
    pub fn cef_string_userfree_utf16_free(str_: cef_string_userfree_utf16_t);
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_utf16_to_lower(
        src: *const char16, src_len: usize, output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_upper(
        src: *const char16, src_len: usize, output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
pub type cef_char_t = char16;
pub type cef_string_userfree_t = cef_string_userfree_utf16_t;
pub type cef_string_t = cef_string_utf16_t;
#[doc = ""]
pub type cef_string_list_t = *mut ::std::os::raw::c_void;
extern "C" {
    #[doc = ""]
    pub fn cef_string_list_alloc() -> cef_string_list_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_list_size(list: cef_string_list_t) -> usize;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_list_value(
        list: cef_string_list_t, index: usize, value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_list_append(list: cef_string_list_t, value: *const cef_string_t);
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_list_clear(list: cef_string_list_t);
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_list_free(list: cef_string_list_t);
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_list_copy(list: cef_string_list_t) -> cef_string_list_t;
}
#[doc = ""]
pub type cef_string_map_t = *mut ::std::os::raw::c_void;
extern "C" {
    #[doc = ""]
    pub fn cef_string_map_alloc() -> cef_string_map_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_map_size(map: cef_string_map_t) -> usize;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_map_find(
        map: cef_string_map_t, key: *const cef_string_t, value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_map_key(
        map: cef_string_map_t, index: usize, key: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_map_value(
        map: cef_string_map_t, index: usize, value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_map_append(
        map: cef_string_map_t, key: *const cef_string_t, value: *const cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_map_clear(map: cef_string_map_t);
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_map_free(map: cef_string_map_t);
}
#[doc = ""]
pub type cef_string_multimap_t = *mut ::std::os::raw::c_void;
extern "C" {
    #[doc = ""]
    pub fn cef_string_multimap_alloc() -> cef_string_multimap_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_multimap_size(map: cef_string_multimap_t) -> usize;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_multimap_find_count(
        map: cef_string_multimap_t, key: *const cef_string_t,
    ) -> usize;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_multimap_enumerate(
        map: cef_string_multimap_t, key: *const cef_string_t, value_index: usize,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_multimap_key(
        map: cef_string_multimap_t, index: usize, key: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_multimap_value(
        map: cef_string_multimap_t, index: usize, value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_multimap_append(
        map: cef_string_multimap_t, key: *const cef_string_t, value: *const cef_string_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_multimap_clear(map: cef_string_multimap_t);
}
extern "C" {
    #[doc = ""]
    pub fn cef_string_multimap_free(map: cef_string_multimap_t);
}
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_time_t {
    pub year: ::std::os::raw::c_int,
    pub month: ::std::os::raw::c_int,
    pub day_of_week: ::std::os::raw::c_int,
    pub day_of_month: ::std::os::raw::c_int,
    pub hour: ::std::os::raw::c_int,
    pub minute: ::std::os::raw::c_int,
    pub second: ::std::os::raw::c_int,
    pub millisecond: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_time_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_time_t>(),
        32usize,
        concat!("Size of: ", stringify!(_cef_time_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_time_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_time_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).month as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).day_of_week as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(day_of_week)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).day_of_month as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(day_of_month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).hour as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).minute as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).second as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_time_t>())).millisecond as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_time_t),
            "::",
            stringify!(millisecond)
        )
    );
}
#[doc = ""]
pub type cef_time_t = _cef_time_t;
extern "C" {
    #[doc = ""]
    pub fn cef_time_to_timet(
        cef_time: *const cef_time_t, time: *mut time_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_from_timet(time: time_t, cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_time_to_doublet(
        cef_time: *const cef_time_t, time: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_from_doublet(time: f64, cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_time_now(cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_time_delta(
        cef_time1: *const cef_time_t, cef_time2: *const cef_time_t,
        delta: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
pub type DWORD = ::std::os::raw::c_ulong;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT_PTR = ::std::os::raw::c_uint;
pub type LONG_PTR = ::std::os::raw::c_long;
pub type LONG = ::std::os::raw::c_long;
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HINSTANCE__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HINSTANCE__() {
    assert_eq!(
        ::std::mem::size_of::<HINSTANCE__>(),
        4usize,
        concat!("Size of: ", stringify!(HINSTANCE__))
    );
    assert_eq!(
        ::std::mem::align_of::<HINSTANCE__>(),
        4usize,
        concat!("Alignment of ", stringify!(HINSTANCE__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HINSTANCE__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HINSTANCE__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HINSTANCE = *mut HINSTANCE__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HWND__() {
    assert_eq!(
        ::std::mem::size_of::<HWND__>(),
        4usize,
        concat!("Size of: ", stringify!(HWND__))
    );
    assert_eq!(
        ::std::mem::align_of::<HWND__>(),
        4usize,
        concat!("Alignment of ", stringify!(HWND__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HWND__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HWND__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HWND = *mut HWND__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HICON__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HICON__() {
    assert_eq!(
        ::std::mem::size_of::<HICON__>(),
        4usize,
        concat!("Size of: ", stringify!(HICON__))
    );
    assert_eq!(
        ::std::mem::align_of::<HICON__>(),
        4usize,
        concat!("Alignment of ", stringify!(HICON__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HICON__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HICON__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HICON = *mut HICON__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HMENU__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HMENU__() {
    assert_eq!(
        ::std::mem::size_of::<HMENU__>(),
        4usize,
        concat!("Size of: ", stringify!(HMENU__))
    );
    assert_eq!(
        ::std::mem::align_of::<HMENU__>(),
        4usize,
        concat!("Alignment of ", stringify!(HMENU__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HMENU__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HMENU__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HMENU = *mut HMENU__;
pub type HCURSOR = HICON;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINT {
    pub x: LONG,
    pub y: LONG,
}
#[test]
fn bindgen_test_layout_tagPOINT() {
    assert_eq!(
        ::std::mem::size_of::<tagPOINT>(),
        8usize,
        concat!("Size of: ", stringify!(tagPOINT))
    );
    assert_eq!(
        ::std::mem::align_of::<tagPOINT>(),
        4usize,
        concat!("Alignment of ", stringify!(tagPOINT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagPOINT>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagPOINT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagPOINT>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagPOINT),
            "::",
            stringify!(y)
        )
    );
}
pub type POINT = tagPOINT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMSG {
    pub hwnd: HWND,
    pub message: UINT,
    pub wParam: WPARAM,
    pub lParam: LPARAM,
    pub time: DWORD,
    pub pt: POINT,
}
#[test]
fn bindgen_test_layout_tagMSG() {
    assert_eq!(
        ::std::mem::size_of::<tagMSG>(),
        28usize,
        concat!("Size of: ", stringify!(tagMSG))
    );
    assert_eq!(
        ::std::mem::align_of::<tagMSG>(),
        4usize,
        concat!("Alignment of ", stringify!(tagMSG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).hwnd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(hwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).message as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).wParam as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(wParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).lParam as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(lParam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagMSG>())).pt as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tagMSG),
            "::",
            stringify!(pt)
        )
    );
}
pub type MSG = tagMSG;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_main_args_t {
    pub instance: HINSTANCE,
}
#[test]
fn bindgen_test_layout__cef_main_args_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_main_args_t>(),
        4usize,
        concat!("Size of: ", stringify!(_cef_main_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_main_args_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_main_args_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_main_args_t>())).instance as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_main_args_t),
            "::",
            stringify!(instance)
        )
    );
}
#[doc = ""]
pub type cef_main_args_t = _cef_main_args_t;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_window_info_t {
    pub ex_style: DWORD,
    pub window_name: cef_string_t,
    pub style: DWORD,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub parent_window: HWND,
    pub menu: HMENU,
    #[doc = ""]
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    #[doc = ""]
    pub shared_texture_enabled: ::std::os::raw::c_int,
    #[doc = ""]
    pub external_begin_frame_enabled: ::std::os::raw::c_int,
    #[doc = ""]
    pub window: HWND,
}
#[test]
fn bindgen_test_layout__cef_window_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_window_info_t>(),
        60usize,
        concat!("Size of: ", stringify!(_cef_window_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_window_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_window_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).ex_style as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(ex_style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).window_name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(window_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).style as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).x as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).y as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).width as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).height as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_window_info_t>())).parent_window as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(parent_window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).menu as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_window_info_t>())).windowless_rendering_enabled as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(windowless_rendering_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_window_info_t>())).shared_texture_enabled as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(shared_texture_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_window_info_t>())).external_begin_frame_enabled as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(external_begin_frame_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_window_info_t>())).window as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_window_info_t),
            "::",
            stringify!(window)
        )
    );
}
#[doc = ""]
pub type cef_window_info_t = _cef_window_info_t;
pub type cef_color_t = uint32;
pub mod cef_log_severity_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const LOGSEVERITY_DEFAULT: Type = 0;
    #[doc = ""]
    pub const LOGSEVERITY_VERBOSE: Type = 1;
    #[doc = ""]
    pub const LOGSEVERITY_DEBUG: Type = 1;
    #[doc = ""]
    pub const LOGSEVERITY_INFO: Type = 2;
    #[doc = ""]
    pub const LOGSEVERITY_WARNING: Type = 3;
    #[doc = ""]
    pub const LOGSEVERITY_ERROR: Type = 4;
    #[doc = ""]
    pub const LOGSEVERITY_FATAL: Type = 5;
    #[doc = ""]
    pub const LOGSEVERITY_DISABLE: Type = 99;
}
pub mod cef_state_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const STATE_DEFAULT: Type = 0;
    #[doc = ""]
    pub const STATE_ENABLED: Type = 1;
    #[doc = ""]
    pub const STATE_DISABLED: Type = 2;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_settings_t {
    #[doc = ""]
    pub size: usize,
    #[doc = ""]
    pub no_sandbox: ::std::os::raw::c_int,
    #[doc = ""]
    pub browser_subprocess_path: cef_string_t,
    #[doc = ""]
    pub framework_dir_path: cef_string_t,
    #[doc = ""]
    pub main_bundle_path: cef_string_t,
    #[doc = ""]
    pub chrome_runtime: ::std::os::raw::c_int,
    #[doc = ""]
    pub multi_threaded_message_loop: ::std::os::raw::c_int,
    #[doc = ""]
    pub external_message_pump: ::std::os::raw::c_int,
    #[doc = ""]
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    #[doc = ""]
    pub command_line_args_disabled: ::std::os::raw::c_int,
    #[doc = ""]
    pub cache_path: cef_string_t,
    #[doc = ""]
    pub root_cache_path: cef_string_t,
    #[doc = ""]
    pub user_data_path: cef_string_t,
    #[doc = ""]
    pub persist_session_cookies: ::std::os::raw::c_int,
    #[doc = ""]
    pub persist_user_preferences: ::std::os::raw::c_int,
    #[doc = ""]
    pub user_agent: cef_string_t,
    #[doc = ""]
    pub product_version: cef_string_t,
    #[doc = ""]
    pub locale: cef_string_t,
    #[doc = ""]
    pub log_file: cef_string_t,
    #[doc = ""]
    pub log_severity: cef_log_severity_t::Type,
    #[doc = ""]
    pub javascript_flags: cef_string_t,
    #[doc = ""]
    pub resources_dir_path: cef_string_t,
    #[doc = ""]
    pub locales_dir_path: cef_string_t,
    #[doc = ""]
    pub pack_loading_disabled: ::std::os::raw::c_int,
    #[doc = ""]
    pub remote_debugging_port: ::std::os::raw::c_int,
    #[doc = ""]
    pub uncaught_exception_stack_size: ::std::os::raw::c_int,
    #[doc = ""]
    pub ignore_certificate_errors: ::std::os::raw::c_int,
    #[doc = ""]
    pub background_color: cef_color_t,
    #[doc = ""]
    pub accept_language_list: cef_string_t,
    #[doc = ""]
    pub application_client_id_for_file_scanning: cef_string_t,
}
#[test]
fn bindgen_test_layout__cef_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_settings_t>(),
        240usize,
        concat!("Size of: ", stringify!(_cef_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_settings_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_settings_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).no_sandbox as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(no_sandbox)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).browser_subprocess_path as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(browser_subprocess_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).framework_dir_path as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(framework_dir_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).main_bundle_path as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(main_bundle_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).chrome_runtime as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(chrome_runtime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).multi_threaded_message_loop as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(multi_threaded_message_loop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).external_message_pump as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(external_message_pump)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).windowless_rendering_enabled as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(windowless_rendering_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).command_line_args_disabled as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(command_line_args_disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).cache_path as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(cache_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).root_cache_path as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(root_cache_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).user_data_path as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(user_data_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).persist_session_cookies as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(persist_session_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).persist_user_preferences as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(persist_user_preferences)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).user_agent as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(user_agent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).product_version as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(product_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).locale as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(locale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).log_file as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(log_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_settings_t>())).log_severity as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(log_severity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).javascript_flags as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(javascript_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).resources_dir_path as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(resources_dir_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).locales_dir_path as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(locales_dir_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).pack_loading_disabled as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(pack_loading_disabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).remote_debugging_port as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(remote_debugging_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).uncaught_exception_stack_size as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(uncaught_exception_stack_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).ignore_certificate_errors as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(ignore_certificate_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).background_color as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(background_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).accept_language_list as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(accept_language_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_settings_t>())).application_client_id_for_file_scanning
                as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_settings_t),
            "::",
            stringify!(application_client_id_for_file_scanning)
        )
    );
}
#[doc = ""]
pub type cef_settings_t = _cef_settings_t;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_context_settings_t {
    #[doc = ""]
    pub size: usize,
    #[doc = ""]
    pub cache_path: cef_string_t,
    #[doc = ""]
    pub persist_session_cookies: ::std::os::raw::c_int,
    #[doc = ""]
    pub persist_user_preferences: ::std::os::raw::c_int,
    #[doc = ""]
    pub ignore_certificate_errors: ::std::os::raw::c_int,
    #[doc = ""]
    pub accept_language_list: cef_string_t,
}
#[test]
fn bindgen_test_layout__cef_request_context_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_context_settings_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_request_context_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_context_settings_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_request_context_settings_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_settings_t>())).size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_settings_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_settings_t>())).cache_path as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_settings_t),
            "::",
            stringify!(cache_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_settings_t>())).persist_session_cookies
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_settings_t),
            "::",
            stringify!(persist_session_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_settings_t>())).persist_user_preferences
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_settings_t),
            "::",
            stringify!(persist_user_preferences)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_settings_t>())).ignore_certificate_errors
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_settings_t),
            "::",
            stringify!(ignore_certificate_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_settings_t>())).accept_language_list
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_settings_t),
            "::",
            stringify!(accept_language_list)
        )
    );
}
#[doc = ""]
pub type cef_request_context_settings_t = _cef_request_context_settings_t;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_settings_t {
    #[doc = ""]
    pub size: usize,
    #[doc = ""]
    pub windowless_frame_rate: ::std::os::raw::c_int,
    #[doc = ""]
    pub standard_font_family: cef_string_t,
    pub fixed_font_family: cef_string_t,
    pub serif_font_family: cef_string_t,
    pub sans_serif_font_family: cef_string_t,
    pub cursive_font_family: cef_string_t,
    pub fantasy_font_family: cef_string_t,
    pub default_font_size: ::std::os::raw::c_int,
    pub default_fixed_font_size: ::std::os::raw::c_int,
    pub minimum_font_size: ::std::os::raw::c_int,
    pub minimum_logical_font_size: ::std::os::raw::c_int,
    #[doc = ""]
    pub default_encoding: cef_string_t,
    #[doc = ""]
    pub remote_fonts: cef_state_t::Type,
    #[doc = ""]
    pub javascript: cef_state_t::Type,
    #[doc = ""]
    pub javascript_close_windows: cef_state_t::Type,
    #[doc = ""]
    pub javascript_access_clipboard: cef_state_t::Type,
    #[doc = ""]
    pub javascript_dom_paste: cef_state_t::Type,
    #[doc = ""]
    pub plugins: cef_state_t::Type,
    #[doc = ""]
    pub universal_access_from_file_urls: cef_state_t::Type,
    #[doc = ""]
    pub file_access_from_file_urls: cef_state_t::Type,
    #[doc = ""]
    pub web_security: cef_state_t::Type,
    #[doc = ""]
    pub image_loading: cef_state_t::Type,
    #[doc = ""]
    pub image_shrink_standalone_to_fit: cef_state_t::Type,
    #[doc = ""]
    pub text_area_resize: cef_state_t::Type,
    #[doc = ""]
    pub tab_to_links: cef_state_t::Type,
    #[doc = ""]
    pub local_storage: cef_state_t::Type,
    #[doc = ""]
    pub databases: cef_state_t::Type,
    #[doc = ""]
    pub application_cache: cef_state_t::Type,
    #[doc = ""]
    pub webgl: cef_state_t::Type,
    #[doc = ""]
    pub background_color: cef_color_t,
    #[doc = ""]
    pub accept_language_list: cef_string_t,
}
#[test]
fn bindgen_test_layout__cef_browser_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_browser_settings_t>(),
        192usize,
        concat!("Size of: ", stringify!(_cef_browser_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_browser_settings_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_browser_settings_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_settings_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).windowless_frame_rate as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(windowless_frame_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).standard_font_family as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(standard_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).fixed_font_family as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(fixed_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).serif_font_family as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(serif_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).sans_serif_font_family as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(sans_serif_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).cursive_font_family as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(cursive_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).fantasy_font_family as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(fantasy_font_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).default_font_size as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(default_font_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).default_fixed_font_size as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(default_fixed_font_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).minimum_font_size as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(minimum_font_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).minimum_logical_font_size
                as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(minimum_logical_font_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).default_encoding as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(default_encoding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).remote_fonts as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(remote_fonts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).javascript as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(javascript)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).javascript_close_windows as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(javascript_close_windows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).javascript_access_clipboard
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(javascript_access_clipboard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).javascript_dom_paste as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(javascript_dom_paste)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_settings_t>())).plugins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).universal_access_from_file_urls
                as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(universal_access_from_file_urls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).file_access_from_file_urls
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(file_access_from_file_urls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).web_security as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(web_security)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).image_loading as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(image_loading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).image_shrink_standalone_to_fit
                as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(image_shrink_standalone_to_fit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).text_area_resize as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(text_area_resize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).tab_to_links as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(tab_to_links)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).local_storage as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(local_storage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).databases as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(databases)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).application_cache as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(application_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_settings_t>())).webgl as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(webgl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).background_color as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(background_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_settings_t>())).accept_language_list as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_settings_t),
            "::",
            stringify!(accept_language_list)
        )
    );
}
#[doc = ""]
pub type cef_browser_settings_t = _cef_browser_settings_t;
pub mod cef_return_value_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const RV_CANCEL: Type = 0;
    #[doc = ""]
    pub const RV_CONTINUE: Type = 1;
    #[doc = ""]
    pub const RV_CONTINUE_ASYNC: Type = 2;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_urlparts_t {
    #[doc = ""]
    pub spec: cef_string_t,
    #[doc = ""]
    pub scheme: cef_string_t,
    #[doc = ""]
    pub username: cef_string_t,
    #[doc = ""]
    pub password: cef_string_t,
    #[doc = ""]
    pub host: cef_string_t,
    #[doc = ""]
    pub port: cef_string_t,
    #[doc = ""]
    pub origin: cef_string_t,
    #[doc = ""]
    pub path: cef_string_t,
    #[doc = ""]
    pub query: cef_string_t,
    #[doc = ""]
    pub fragment: cef_string_t,
}
#[test]
fn bindgen_test_layout__cef_urlparts_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_urlparts_t>(),
        120usize,
        concat!("Size of: ", stringify!(_cef_urlparts_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_urlparts_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_urlparts_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlparts_t>())).spec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlparts_t),
            "::",
            stringify!(spec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlparts_t>())).scheme as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlparts_t),
            "::",
            stringify!(scheme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlparts_t>())).username as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlparts_t),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlparts_t>())).password as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlparts_t),
            "::",
            stringify!(password)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlparts_t>())).host as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlparts_t),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlparts_t>())).port as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlparts_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlparts_t>())).origin as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlparts_t),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlparts_t>())).path as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlparts_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlparts_t>())).query as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlparts_t),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_urlparts_t>())).fragment as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_urlparts_t),
            "::",
            stringify!(fragment)
        )
    );
}
#[doc = ""]
pub type cef_urlparts_t = _cef_urlparts_t;
pub mod cef_cookie_priority_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_COOKIE_PRIORITY_LOW: Type = -1;
    pub const CEF_COOKIE_PRIORITY_MEDIUM: Type = 0;
    pub const CEF_COOKIE_PRIORITY_HIGH: Type = 1;
}
pub mod cef_cookie_same_site_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_COOKIE_SAME_SITE_UNSPECIFIED: Type = 0;
    pub const CEF_COOKIE_SAME_SITE_NO_RESTRICTION: Type = 1;
    pub const CEF_COOKIE_SAME_SITE_LAX_MODE: Type = 2;
    pub const CEF_COOKIE_SAME_SITE_STRICT_MODE: Type = 3;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cookie_t {
    #[doc = ""]
    pub name: cef_string_t,
    #[doc = ""]
    pub value: cef_string_t,
    #[doc = ""]
    pub domain: cef_string_t,
    #[doc = ""]
    pub path: cef_string_t,
    #[doc = ""]
    pub secure: ::std::os::raw::c_int,
    #[doc = ""]
    pub httponly: ::std::os::raw::c_int,
    #[doc = ""]
    pub creation: cef_time_t,
    #[doc = ""]
    pub last_access: cef_time_t,
    #[doc = ""]
    pub has_expires: ::std::os::raw::c_int,
    pub expires: cef_time_t,
    #[doc = ""]
    pub same_site: cef_cookie_same_site_t::Type,
    #[doc = ""]
    pub priority: cef_cookie_priority_t::Type,
}
#[test]
fn bindgen_test_layout__cef_cookie_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cookie_t>(),
        164usize,
        concat!("Size of: ", stringify!(_cef_cookie_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cookie_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_cookie_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).value as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).domain as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).path as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).secure as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(secure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).httponly as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(httponly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).creation as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(creation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).last_access as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(last_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).has_expires as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(has_expires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).expires as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(expires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).same_site as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(same_site)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_t>())).priority as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_t),
            "::",
            stringify!(priority)
        )
    );
}
#[doc = ""]
pub type cef_cookie_t = _cef_cookie_t;
pub mod cef_termination_status_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const TS_ABNORMAL_TERMINATION: Type = 0;
    #[doc = ""]
    pub const TS_PROCESS_WAS_KILLED: Type = 1;
    #[doc = ""]
    pub const TS_PROCESS_CRASHED: Type = 2;
    #[doc = ""]
    pub const TS_PROCESS_OOM: Type = 3;
}
pub mod cef_path_key_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const PK_DIR_CURRENT: Type = 0;
    #[doc = ""]
    pub const PK_DIR_EXE: Type = 1;
    #[doc = ""]
    pub const PK_DIR_MODULE: Type = 2;
    #[doc = ""]
    pub const PK_DIR_TEMP: Type = 3;
    #[doc = ""]
    pub const PK_FILE_EXE: Type = 4;
    #[doc = ""]
    pub const PK_FILE_MODULE: Type = 5;
    #[doc = ""]
    pub const PK_LOCAL_APP_DATA: Type = 6;
    #[doc = ""]
    pub const PK_USER_DATA: Type = 7;
    #[doc = ""]
    pub const PK_DIR_RESOURCES: Type = 8;
}
pub mod cef_storage_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const ST_LOCALSTORAGE: Type = 0;
    pub const ST_SESSIONSTORAGE: Type = 1;
}
pub mod cef_errorcode_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const ERR_NONE: Type = 0;
    pub const ERR_IO_PENDING: Type = -1;
    pub const ERR_FAILED: Type = -2;
    pub const ERR_ABORTED: Type = -3;
    pub const ERR_INVALID_ARGUMENT: Type = -4;
    pub const ERR_INVALID_HANDLE: Type = -5;
    pub const ERR_FILE_NOT_FOUND: Type = -6;
    pub const ERR_TIMED_OUT: Type = -7;
    pub const ERR_FILE_TOO_BIG: Type = -8;
    pub const ERR_UNEXPECTED: Type = -9;
    pub const ERR_ACCESS_DENIED: Type = -10;
    pub const ERR_NOT_IMPLEMENTED: Type = -11;
    pub const ERR_INSUFFICIENT_RESOURCES: Type = -12;
    pub const ERR_OUT_OF_MEMORY: Type = -13;
    pub const ERR_UPLOAD_FILE_CHANGED: Type = -14;
    pub const ERR_SOCKET_NOT_CONNECTED: Type = -15;
    pub const ERR_FILE_EXISTS: Type = -16;
    pub const ERR_FILE_PATH_TOO_LONG: Type = -17;
    pub const ERR_FILE_NO_SPACE: Type = -18;
    pub const ERR_FILE_VIRUS_INFECTED: Type = -19;
    pub const ERR_BLOCKED_BY_CLIENT: Type = -20;
    pub const ERR_NETWORK_CHANGED: Type = -21;
    pub const ERR_BLOCKED_BY_ADMINISTRATOR: Type = -22;
    pub const ERR_SOCKET_IS_CONNECTED: Type = -23;
    pub const ERR_BLOCKED_ENROLLMENT_CHECK_PENDING: Type = -24;
    pub const ERR_UPLOAD_STREAM_REWIND_NOT_SUPPORTED: Type = -25;
    pub const ERR_CONTEXT_SHUT_DOWN: Type = -26;
    pub const ERR_BLOCKED_BY_RESPONSE: Type = -27;
    pub const ERR_CLEARTEXT_NOT_PERMITTED: Type = -29;
    pub const ERR_BLOCKED_BY_CSP: Type = -30;
    pub const ERR_H2_OR_QUIC_REQUIRED: Type = -31;
    pub const ERR_CONNECTION_CLOSED: Type = -100;
    pub const ERR_CONNECTION_RESET: Type = -101;
    pub const ERR_CONNECTION_REFUSED: Type = -102;
    pub const ERR_CONNECTION_ABORTED: Type = -103;
    pub const ERR_CONNECTION_FAILED: Type = -104;
    pub const ERR_NAME_NOT_RESOLVED: Type = -105;
    pub const ERR_INTERNET_DISCONNECTED: Type = -106;
    pub const ERR_SSL_PROTOCOL_ERROR: Type = -107;
    pub const ERR_ADDRESS_INVALID: Type = -108;
    pub const ERR_ADDRESS_UNREACHABLE: Type = -109;
    pub const ERR_SSL_CLIENT_AUTH_CERT_NEEDED: Type = -110;
    pub const ERR_TUNNEL_CONNECTION_FAILED: Type = -111;
    pub const ERR_NO_SSL_VERSIONS_ENABLED: Type = -112;
    pub const ERR_SSL_VERSION_OR_CIPHER_MISMATCH: Type = -113;
    pub const ERR_SSL_RENEGOTIATION_REQUESTED: Type = -114;
    pub const ERR_PROXY_AUTH_UNSUPPORTED: Type = -115;
    pub const ERR_CERT_ERROR_IN_SSL_RENEGOTIATION: Type = -116;
    pub const ERR_BAD_SSL_CLIENT_AUTH_CERT: Type = -117;
    pub const ERR_CONNECTION_TIMED_OUT: Type = -118;
    pub const ERR_HOST_RESOLVER_QUEUE_TOO_LARGE: Type = -119;
    pub const ERR_SOCKS_CONNECTION_FAILED: Type = -120;
    pub const ERR_SOCKS_CONNECTION_HOST_UNREACHABLE: Type = -121;
    pub const ERR_ALPN_NEGOTIATION_FAILED: Type = -122;
    pub const ERR_SSL_NO_RENEGOTIATION: Type = -123;
    pub const ERR_WINSOCK_UNEXPECTED_WRITTEN_BYTES: Type = -124;
    pub const ERR_SSL_DECOMPRESSION_FAILURE_ALERT: Type = -125;
    pub const ERR_SSL_BAD_RECORD_MAC_ALERT: Type = -126;
    pub const ERR_PROXY_AUTH_REQUESTED: Type = -127;
    pub const ERR_PROXY_CONNECTION_FAILED: Type = -130;
    pub const ERR_MANDATORY_PROXY_CONFIGURATION_FAILED: Type = -131;
    pub const ERR_PRECONNECT_MAX_SOCKET_LIMIT: Type = -133;
    pub const ERR_SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED: Type = -134;
    pub const ERR_SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY: Type = -135;
    pub const ERR_PROXY_CERTIFICATE_INVALID: Type = -136;
    pub const ERR_NAME_RESOLUTION_FAILED: Type = -137;
    pub const ERR_NETWORK_ACCESS_DENIED: Type = -138;
    pub const ERR_TEMPORARILY_THROTTLED: Type = -139;
    pub const ERR_HTTPS_PROXY_TUNNEL_RESPONSE_REDIRECT: Type = -140;
    pub const ERR_SSL_CLIENT_AUTH_SIGNATURE_FAILED: Type = -141;
    pub const ERR_MSG_TOO_BIG: Type = -142;
    pub const ERR_WS_PROTOCOL_ERROR: Type = -145;
    pub const ERR_ADDRESS_IN_USE: Type = -147;
    pub const ERR_SSL_HANDSHAKE_NOT_COMPLETED: Type = -148;
    pub const ERR_SSL_BAD_PEER_PUBLIC_KEY: Type = -149;
    pub const ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN: Type = -150;
    pub const ERR_CLIENT_AUTH_CERT_TYPE_UNSUPPORTED: Type = -151;
    pub const ERR_SSL_DECRYPT_ERROR_ALERT: Type = -153;
    pub const ERR_WS_THROTTLE_QUEUE_TOO_LARGE: Type = -154;
    pub const ERR_SSL_SERVER_CERT_CHANGED: Type = -156;
    pub const ERR_SSL_UNRECOGNIZED_NAME_ALERT: Type = -159;
    pub const ERR_SOCKET_SET_RECEIVE_BUFFER_SIZE_ERROR: Type = -160;
    pub const ERR_SOCKET_SET_SEND_BUFFER_SIZE_ERROR: Type = -161;
    pub const ERR_SOCKET_RECEIVE_BUFFER_SIZE_UNCHANGEABLE: Type = -162;
    pub const ERR_SOCKET_SEND_BUFFER_SIZE_UNCHANGEABLE: Type = -163;
    pub const ERR_SSL_CLIENT_AUTH_CERT_BAD_FORMAT: Type = -164;
    pub const ERR_ICANN_NAME_COLLISION: Type = -166;
    pub const ERR_SSL_SERVER_CERT_BAD_FORMAT: Type = -167;
    pub const ERR_CT_STH_PARSING_FAILED: Type = -168;
    pub const ERR_CT_STH_INCOMPLETE: Type = -169;
    pub const ERR_UNABLE_TO_REUSE_CONNECTION_FOR_PROXY_AUTH: Type = -170;
    pub const ERR_CT_CONSISTENCY_PROOF_PARSING_FAILED: Type = -171;
    pub const ERR_SSL_OBSOLETE_CIPHER: Type = -172;
    pub const ERR_WS_UPGRADE: Type = -173;
    pub const ERR_READ_IF_READY_NOT_IMPLEMENTED: Type = -174;
    pub const ERR_NO_BUFFER_SPACE: Type = -176;
    pub const ERR_SSL_CLIENT_AUTH_NO_COMMON_ALGORITHMS: Type = -177;
    pub const ERR_EARLY_DATA_REJECTED: Type = -178;
    pub const ERR_WRONG_VERSION_ON_EARLY_DATA: Type = -179;
    pub const ERR_TLS13_DOWNGRADE_DETECTED: Type = -180;
    pub const ERR_SSL_KEY_USAGE_INCOMPATIBLE: Type = -181;
    pub const ERR_CERT_COMMON_NAME_INVALID: Type = -200;
    pub const ERR_CERT_DATE_INVALID: Type = -201;
    pub const ERR_CERT_AUTHORITY_INVALID: Type = -202;
    pub const ERR_CERT_CONTAINS_ERRORS: Type = -203;
    pub const ERR_CERT_NO_REVOCATION_MECHANISM: Type = -204;
    pub const ERR_CERT_UNABLE_TO_CHECK_REVOCATION: Type = -205;
    pub const ERR_CERT_REVOKED: Type = -206;
    pub const ERR_CERT_INVALID: Type = -207;
    pub const ERR_CERT_WEAK_SIGNATURE_ALGORITHM: Type = -208;
    pub const ERR_CERT_NON_UNIQUE_NAME: Type = -210;
    pub const ERR_CERT_WEAK_KEY: Type = -211;
    pub const ERR_CERT_NAME_CONSTRAINT_VIOLATION: Type = -212;
    pub const ERR_CERT_VALIDITY_TOO_LONG: Type = -213;
    pub const ERR_CERTIFICATE_TRANSPARENCY_REQUIRED: Type = -214;
    pub const ERR_CERT_SYMANTEC_LEGACY: Type = -215;
    pub const ERR_CERT_KNOWN_INTERCEPTION_BLOCKED: Type = -217;
    pub const ERR_SSL_OBSOLETE_VERSION: Type = -218;
    pub const ERR_CERT_END: Type = -219;
    pub const ERR_INVALID_URL: Type = -300;
    pub const ERR_DISALLOWED_URL_SCHEME: Type = -301;
    pub const ERR_UNKNOWN_URL_SCHEME: Type = -302;
    pub const ERR_INVALID_REDIRECT: Type = -303;
    pub const ERR_TOO_MANY_REDIRECTS: Type = -310;
    pub const ERR_UNSAFE_REDIRECT: Type = -311;
    pub const ERR_UNSAFE_PORT: Type = -312;
    pub const ERR_INVALID_RESPONSE: Type = -320;
    pub const ERR_INVALID_CHUNKED_ENCODING: Type = -321;
    pub const ERR_METHOD_NOT_SUPPORTED: Type = -322;
    pub const ERR_UNEXPECTED_PROXY_AUTH: Type = -323;
    pub const ERR_EMPTY_RESPONSE: Type = -324;
    pub const ERR_RESPONSE_HEADERS_TOO_BIG: Type = -325;
    pub const ERR_PAC_SCRIPT_FAILED: Type = -327;
    pub const ERR_REQUEST_RANGE_NOT_SATISFIABLE: Type = -328;
    pub const ERR_MALFORMED_IDENTITY: Type = -329;
    pub const ERR_CONTENT_DECODING_FAILED: Type = -330;
    pub const ERR_NETWORK_IO_SUSPENDED: Type = -331;
    pub const ERR_SYN_REPLY_NOT_RECEIVED: Type = -332;
    pub const ERR_ENCODING_CONVERSION_FAILED: Type = -333;
    pub const ERR_UNRECOGNIZED_FTP_DIRECTORY_LISTING_FORMAT: Type = -334;
    pub const ERR_NO_SUPPORTED_PROXIES: Type = -336;
    pub const ERR_HTTP2_PROTOCOL_ERROR: Type = -337;
    pub const ERR_INVALID_AUTH_CREDENTIALS: Type = -338;
    pub const ERR_UNSUPPORTED_AUTH_SCHEME: Type = -339;
    pub const ERR_ENCODING_DETECTION_FAILED: Type = -340;
    pub const ERR_MISSING_AUTH_CREDENTIALS: Type = -341;
    pub const ERR_UNEXPECTED_SECURITY_LIBRARY_STATUS: Type = -342;
    pub const ERR_MISCONFIGURED_AUTH_ENVIRONMENT: Type = -343;
    pub const ERR_UNDOCUMENTED_SECURITY_LIBRARY_STATUS: Type = -344;
    pub const ERR_RESPONSE_BODY_TOO_BIG_TO_DRAIN: Type = -345;
    pub const ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH: Type = -346;
    pub const ERR_INCOMPLETE_HTTP2_HEADERS: Type = -347;
    pub const ERR_PAC_NOT_IN_DHCP: Type = -348;
    pub const ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION: Type = -349;
    pub const ERR_RESPONSE_HEADERS_MULTIPLE_LOCATION: Type = -350;
    pub const ERR_HTTP2_SERVER_REFUSED_STREAM: Type = -351;
    pub const ERR_HTTP2_PING_FAILED: Type = -352;
    pub const ERR_CONTENT_LENGTH_MISMATCH: Type = -354;
    pub const ERR_INCOMPLETE_CHUNKED_ENCODING: Type = -355;
    pub const ERR_QUIC_PROTOCOL_ERROR: Type = -356;
    pub const ERR_RESPONSE_HEADERS_TRUNCATED: Type = -357;
    pub const ERR_QUIC_HANDSHAKE_FAILED: Type = -358;
    pub const ERR_HTTP2_INADEQUATE_TRANSPORT_SECURITY: Type = -360;
    pub const ERR_HTTP2_FLOW_CONTROL_ERROR: Type = -361;
    pub const ERR_HTTP2_FRAME_SIZE_ERROR: Type = -362;
    pub const ERR_HTTP2_COMPRESSION_ERROR: Type = -363;
    pub const ERR_PROXY_AUTH_REQUESTED_WITH_NO_CONNECTION: Type = -364;
    pub const ERR_HTTP_1_1_REQUIRED: Type = -365;
    pub const ERR_PROXY_HTTP_1_1_REQUIRED: Type = -366;
    pub const ERR_PAC_SCRIPT_TERMINATED: Type = -367;
    pub const ERR_INVALID_HTTP_RESPONSE: Type = -370;
    pub const ERR_CONTENT_DECODING_INIT_FAILED: Type = -371;
    pub const ERR_HTTP2_RST_STREAM_NO_ERROR_RECEIVED: Type = -372;
    pub const ERR_HTTP2_PUSHED_STREAM_NOT_AVAILABLE: Type = -373;
    pub const ERR_HTTP2_CLAIMED_PUSHED_STREAM_RESET_BY_SERVER: Type = -374;
    pub const ERR_TOO_MANY_RETRIES: Type = -375;
    pub const ERR_HTTP2_STREAM_CLOSED: Type = -376;
    pub const ERR_HTTP2_CLIENT_REFUSED_STREAM: Type = -377;
    pub const ERR_HTTP2_PUSHED_RESPONSE_DOES_NOT_MATCH: Type = -378;
    pub const ERR_HTTP_RESPONSE_CODE_FAILURE: Type = -379;
    pub const ERR_QUIC_CERT_ROOT_NOT_KNOWN: Type = -380;
    pub const ERR_QUIC_GOAWAY_REQUEST_CAN_BE_RETRIED: Type = -381;
    pub const ERR_CACHE_MISS: Type = -400;
    pub const ERR_CACHE_READ_FAILURE: Type = -401;
    pub const ERR_CACHE_WRITE_FAILURE: Type = -402;
    pub const ERR_CACHE_OPERATION_NOT_SUPPORTED: Type = -403;
    pub const ERR_CACHE_OPEN_FAILURE: Type = -404;
    pub const ERR_CACHE_CREATE_FAILURE: Type = -405;
    pub const ERR_CACHE_RACE: Type = -406;
    pub const ERR_CACHE_CHECKSUM_READ_FAILURE: Type = -407;
    pub const ERR_CACHE_CHECKSUM_MISMATCH: Type = -408;
    pub const ERR_CACHE_LOCK_TIMEOUT: Type = -409;
    pub const ERR_CACHE_AUTH_FAILURE_AFTER_READ: Type = -410;
    pub const ERR_CACHE_ENTRY_NOT_SUITABLE: Type = -411;
    pub const ERR_CACHE_DOOM_FAILURE: Type = -412;
    pub const ERR_CACHE_OPEN_OR_CREATE_FAILURE: Type = -413;
    pub const ERR_INSECURE_RESPONSE: Type = -501;
    pub const ERR_NO_PRIVATE_KEY_FOR_CERT: Type = -502;
    pub const ERR_ADD_USER_CERT_FAILED: Type = -503;
    pub const ERR_INVALID_SIGNED_EXCHANGE: Type = -504;
    pub const ERR_INVALID_WEB_BUNDLE: Type = -505;
    pub const ERR_TRUST_TOKEN_OPERATION_FAILED: Type = -506;
    pub const ERR_TRUST_TOKEN_OPERATION_SUCCESS_WITHOUT_SENDING_REQUEST: Type = -507;
    pub const ERR_FTP_FAILED: Type = -601;
    pub const ERR_FTP_SERVICE_UNAVAILABLE: Type = -602;
    pub const ERR_FTP_TRANSFER_ABORTED: Type = -603;
    pub const ERR_FTP_FILE_BUSY: Type = -604;
    pub const ERR_FTP_SYNTAX_ERROR: Type = -605;
    pub const ERR_FTP_COMMAND_NOT_SUPPORTED: Type = -606;
    pub const ERR_FTP_BAD_COMMAND_SEQUENCE: Type = -607;
    pub const ERR_PKCS12_IMPORT_BAD_PASSWORD: Type = -701;
    pub const ERR_PKCS12_IMPORT_FAILED: Type = -702;
    pub const ERR_IMPORT_CA_CERT_NOT_CA: Type = -703;
    pub const ERR_IMPORT_CERT_ALREADY_EXISTS: Type = -704;
    pub const ERR_IMPORT_CA_CERT_FAILED: Type = -705;
    pub const ERR_IMPORT_SERVER_CERT_FAILED: Type = -706;
    pub const ERR_PKCS12_IMPORT_INVALID_MAC: Type = -707;
    pub const ERR_PKCS12_IMPORT_INVALID_FILE: Type = -708;
    pub const ERR_PKCS12_IMPORT_UNSUPPORTED: Type = -709;
    pub const ERR_KEY_GENERATION_FAILED: Type = -710;
    pub const ERR_PRIVATE_KEY_EXPORT_FAILED: Type = -712;
    pub const ERR_SELF_SIGNED_CERT_GENERATION_FAILED: Type = -713;
    pub const ERR_CERT_DATABASE_CHANGED: Type = -714;
    pub const ERR_DNS_MALFORMED_RESPONSE: Type = -800;
    pub const ERR_DNS_SERVER_REQUIRES_TCP: Type = -801;
    pub const ERR_DNS_SERVER_FAILED: Type = -802;
    pub const ERR_DNS_TIMED_OUT: Type = -803;
    pub const ERR_DNS_CACHE_MISS: Type = -804;
    pub const ERR_DNS_SEARCH_EMPTY: Type = -805;
    pub const ERR_DNS_SORT_ERROR: Type = -806;
    pub const ERR_DNS_SECURE_RESOLVER_HOSTNAME_RESOLUTION_FAILED: Type = -808;
}
pub mod cef_cert_status_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CERT_STATUS_NONE: Type = 0;
    pub const CERT_STATUS_COMMON_NAME_INVALID: Type = 1;
    pub const CERT_STATUS_DATE_INVALID: Type = 2;
    pub const CERT_STATUS_AUTHORITY_INVALID: Type = 4;
    pub const CERT_STATUS_NO_REVOCATION_MECHANISM: Type = 16;
    pub const CERT_STATUS_UNABLE_TO_CHECK_REVOCATION: Type = 32;
    pub const CERT_STATUS_REVOKED: Type = 64;
    pub const CERT_STATUS_INVALID: Type = 128;
    pub const CERT_STATUS_WEAK_SIGNATURE_ALGORITHM: Type = 256;
    pub const CERT_STATUS_NON_UNIQUE_NAME: Type = 1024;
    pub const CERT_STATUS_WEAK_KEY: Type = 2048;
    pub const CERT_STATUS_PINNED_KEY_MISSING: Type = 8192;
    pub const CERT_STATUS_NAME_CONSTRAINT_VIOLATION: Type = 16384;
    pub const CERT_STATUS_VALIDITY_TOO_LONG: Type = 32768;
    pub const CERT_STATUS_IS_EV: Type = 65536;
    pub const CERT_STATUS_REV_CHECKING_ENABLED: Type = 131072;
    pub const CERT_STATUS_SHA1_SIGNATURE_PRESENT: Type = 524288;
    pub const CERT_STATUS_CT_COMPLIANCE_FAILED: Type = 1048576;
}
pub mod cef_window_open_disposition_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const WOD_UNKNOWN: Type = 0;
    pub const WOD_CURRENT_TAB: Type = 1;
    pub const WOD_SINGLETON_TAB: Type = 2;
    pub const WOD_NEW_FOREGROUND_TAB: Type = 3;
    pub const WOD_NEW_BACKGROUND_TAB: Type = 4;
    pub const WOD_NEW_POPUP: Type = 5;
    pub const WOD_NEW_WINDOW: Type = 6;
    pub const WOD_SAVE_TO_DISK: Type = 7;
    pub const WOD_OFF_THE_RECORD: Type = 8;
    pub const WOD_IGNORE_ACTION: Type = 9;
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_NONE: cef_drag_operations_mask_t = cef_drag_operations_mask_t(0);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_COPY: cef_drag_operations_mask_t = cef_drag_operations_mask_t(1);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_LINK: cef_drag_operations_mask_t = cef_drag_operations_mask_t(2);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_GENERIC: cef_drag_operations_mask_t = cef_drag_operations_mask_t(4);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_PRIVATE: cef_drag_operations_mask_t = cef_drag_operations_mask_t(8);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_MOVE: cef_drag_operations_mask_t = cef_drag_operations_mask_t(16);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_DELETE: cef_drag_operations_mask_t = cef_drag_operations_mask_t(32);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_EVERY: cef_drag_operations_mask_t = cef_drag_operations_mask_t(-1);
}
impl ::std::ops::BitOr<cef_drag_operations_mask_t> for cef_drag_operations_mask_t {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        cef_drag_operations_mask_t(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for cef_drag_operations_mask_t {
    #[inline]
    fn bitor_assign(&mut self, rhs: cef_drag_operations_mask_t) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<cef_drag_operations_mask_t> for cef_drag_operations_mask_t {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        cef_drag_operations_mask_t(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for cef_drag_operations_mask_t {
    #[inline]
    fn bitand_assign(&mut self, rhs: cef_drag_operations_mask_t) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct cef_drag_operations_mask_t(pub ::std::os::raw::c_int);
pub mod cef_text_input_mode_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_TEXT_INPUT_MODE_DEFAULT: Type = 0;
    pub const CEF_TEXT_INPUT_MODE_NONE: Type = 1;
    pub const CEF_TEXT_INPUT_MODE_TEXT: Type = 2;
    pub const CEF_TEXT_INPUT_MODE_TEL: Type = 3;
    pub const CEF_TEXT_INPUT_MODE_URL: Type = 4;
    pub const CEF_TEXT_INPUT_MODE_EMAIL: Type = 5;
    pub const CEF_TEXT_INPUT_MODE_NUMERIC: Type = 6;
    pub const CEF_TEXT_INPUT_MODE_DECIMAL: Type = 7;
    pub const CEF_TEXT_INPUT_MODE_SEARCH: Type = 8;
    pub const CEF_TEXT_INPUT_MODE_MAX: Type = 8;
}
pub mod cef_v8_accesscontrol_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const V8_ACCESS_CONTROL_DEFAULT: Type = 0;
    pub const V8_ACCESS_CONTROL_ALL_CAN_READ: Type = 1;
    pub const V8_ACCESS_CONTROL_ALL_CAN_WRITE: Type = 2;
    pub const V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING: Type = 4;
}
pub mod cef_v8_propertyattribute_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const V8_PROPERTY_ATTRIBUTE_NONE: Type = 0;
    pub const V8_PROPERTY_ATTRIBUTE_READONLY: Type = 1;
    pub const V8_PROPERTY_ATTRIBUTE_DONTENUM: Type = 2;
    pub const V8_PROPERTY_ATTRIBUTE_DONTDELETE: Type = 4;
}
pub mod cef_postdataelement_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const PDE_TYPE_EMPTY: Type = 0;
    pub const PDE_TYPE_BYTES: Type = 1;
    pub const PDE_TYPE_FILE: Type = 2;
}
pub mod cef_resource_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const RT_MAIN_FRAME: Type = 0;
    #[doc = ""]
    pub const RT_SUB_FRAME: Type = 1;
    #[doc = ""]
    pub const RT_STYLESHEET: Type = 2;
    #[doc = ""]
    pub const RT_SCRIPT: Type = 3;
    #[doc = ""]
    pub const RT_IMAGE: Type = 4;
    #[doc = ""]
    pub const RT_FONT_RESOURCE: Type = 5;
    #[doc = ""]
    pub const RT_SUB_RESOURCE: Type = 6;
    #[doc = ""]
    pub const RT_OBJECT: Type = 7;
    #[doc = ""]
    pub const RT_MEDIA: Type = 8;
    #[doc = ""]
    pub const RT_WORKER: Type = 9;
    #[doc = ""]
    pub const RT_SHARED_WORKER: Type = 10;
    #[doc = ""]
    pub const RT_PREFETCH: Type = 11;
    #[doc = ""]
    pub const RT_FAVICON: Type = 12;
    #[doc = ""]
    pub const RT_XHR: Type = 13;
    #[doc = ""]
    pub const RT_PING: Type = 14;
    #[doc = ""]
    pub const RT_SERVICE_WORKER: Type = 15;
    #[doc = ""]
    pub const RT_CSP_REPORT: Type = 16;
    #[doc = ""]
    pub const RT_PLUGIN_RESOURCE: Type = 17;
}
pub mod cef_transition_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const TT_LINK: Type = 0;
    #[doc = ""]
    pub const TT_EXPLICIT: Type = 1;
    #[doc = ""]
    pub const TT_AUTO_SUBFRAME: Type = 3;
    #[doc = ""]
    pub const TT_MANUAL_SUBFRAME: Type = 4;
    #[doc = ""]
    pub const TT_FORM_SUBMIT: Type = 7;
    #[doc = ""]
    pub const TT_RELOAD: Type = 8;
    #[doc = ""]
    pub const TT_SOURCE_MASK: Type = 255;
    #[doc = ""]
    pub const TT_BLOCKED_FLAG: Type = 8388608;
    #[doc = ""]
    pub const TT_FORWARD_BACK_FLAG: Type = 16777216;
    #[doc = ""]
    pub const TT_DIRECT_LOAD_FLAG: Type = 33554432;
    #[doc = ""]
    pub const TT_CHAIN_START_FLAG: Type = 268435456;
    #[doc = ""]
    pub const TT_CHAIN_END_FLAG: Type = 536870912;
    #[doc = ""]
    pub const TT_CLIENT_REDIRECT_FLAG: Type = 1073741824;
    #[doc = ""]
    pub const TT_SERVER_REDIRECT_FLAG: Type = -2147483648;
    #[doc = ""]
    pub const TT_IS_REDIRECT_MASK: Type = -1073741824;
    #[doc = ""]
    pub const TT_QUALIFIER_MASK: Type = -256;
}
pub mod cef_urlrequest_flags_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const UR_FLAG_NONE: Type = 0;
    #[doc = ""]
    pub const UR_FLAG_SKIP_CACHE: Type = 1;
    #[doc = ""]
    pub const UR_FLAG_ONLY_FROM_CACHE: Type = 2;
    #[doc = ""]
    pub const UR_FLAG_DISABLE_CACHE: Type = 4;
    #[doc = ""]
    pub const UR_FLAG_ALLOW_STORED_CREDENTIALS: Type = 8;
    #[doc = ""]
    pub const UR_FLAG_REPORT_UPLOAD_PROGRESS: Type = 16;
    #[doc = ""]
    pub const UR_FLAG_NO_DOWNLOAD_DATA: Type = 32;
    #[doc = ""]
    pub const UR_FLAG_NO_RETRY_ON_5XX: Type = 64;
    #[doc = ""]
    pub const UR_FLAG_STOP_ON_REDIRECT: Type = 128;
}
pub mod cef_urlrequest_status_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const UR_UNKNOWN: Type = 0;
    #[doc = ""]
    pub const UR_SUCCESS: Type = 1;
    #[doc = ""]
    pub const UR_IO_PENDING: Type = 2;
    #[doc = ""]
    pub const UR_CANCELED: Type = 3;
    #[doc = ""]
    pub const UR_FAILED: Type = 4;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_point_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_point_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_point_t>(),
        8usize,
        concat!("Size of: ", stringify!(_cef_point_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_point_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_point_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_point_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_point_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_point_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_point_t),
            "::",
            stringify!(y)
        )
    );
}
#[doc = ""]
pub type cef_point_t = _cef_point_t;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_rect_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_rect_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_rect_t>(),
        16usize,
        concat!("Size of: ", stringify!(_cef_rect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_rect_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_rect_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_rect_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_rect_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_rect_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_rect_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_rect_t>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_rect_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_rect_t>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_rect_t),
            "::",
            stringify!(height)
        )
    );
}
#[doc = ""]
pub type cef_rect_t = _cef_rect_t;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_size_t {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_size_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_size_t>(),
        8usize,
        concat!("Size of: ", stringify!(_cef_size_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_size_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_size_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_size_t>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_size_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_size_t>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_size_t),
            "::",
            stringify!(height)
        )
    );
}
#[doc = ""]
pub type cef_size_t = _cef_size_t;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_range_t {
    pub from: ::std::os::raw::c_int,
    pub to: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_range_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_range_t>(),
        8usize,
        concat!("Size of: ", stringify!(_cef_range_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_range_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_range_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_range_t>())).from as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_range_t),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_range_t>())).to as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_range_t),
            "::",
            stringify!(to)
        )
    );
}
#[doc = ""]
pub type cef_range_t = _cef_range_t;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_insets_t {
    pub top: ::std::os::raw::c_int,
    pub left: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_insets_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_insets_t>(),
        16usize,
        concat!("Size of: ", stringify!(_cef_insets_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_insets_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_insets_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_insets_t>())).top as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_insets_t),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_insets_t>())).left as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_insets_t),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_insets_t>())).bottom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_insets_t),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_insets_t>())).right as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_insets_t),
            "::",
            stringify!(right)
        )
    );
}
#[doc = ""]
pub type cef_insets_t = _cef_insets_t;
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_draggable_region_t {
    #[doc = ""]
    pub bounds: cef_rect_t,
    #[doc = ""]
    pub draggable: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_draggable_region_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_draggable_region_t>(),
        20usize,
        concat!("Size of: ", stringify!(_cef_draggable_region_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_draggable_region_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_draggable_region_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_draggable_region_t>())).bounds as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_draggable_region_t),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_draggable_region_t>())).draggable as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_draggable_region_t),
            "::",
            stringify!(draggable)
        )
    );
}
#[doc = ""]
pub type cef_draggable_region_t = _cef_draggable_region_t;
pub mod cef_process_id_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const PID_BROWSER: Type = 0;
    #[doc = ""]
    pub const PID_RENDERER: Type = 1;
}
pub mod cef_thread_id_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const TID_UI: Type = 0;
    #[doc = ""]
    pub const TID_FILE_BACKGROUND: Type = 1;
    #[doc = ""]
    pub const TID_FILE: Type = 1;
    #[doc = ""]
    pub const TID_FILE_USER_VISIBLE: Type = 2;
    #[doc = ""]
    pub const TID_FILE_USER_BLOCKING: Type = 3;
    #[doc = ""]
    pub const TID_PROCESS_LAUNCHER: Type = 4;
    #[doc = ""]
    pub const TID_IO: Type = 5;
    #[doc = ""]
    pub const TID_RENDERER: Type = 6;
}
pub mod cef_thread_priority_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const TP_BACKGROUND: Type = 0;
    #[doc = ""]
    pub const TP_NORMAL: Type = 1;
    #[doc = ""]
    pub const TP_DISPLAY: Type = 2;
    #[doc = ""]
    pub const TP_REALTIME_AUDIO: Type = 3;
}
pub mod cef_message_loop_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const ML_TYPE_DEFAULT: Type = 0;
    #[doc = ""]
    pub const ML_TYPE_UI: Type = 1;
    #[doc = ""]
    pub const ML_TYPE_IO: Type = 2;
}
pub mod cef_com_init_mode_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const COM_INIT_MODE_NONE: Type = 0;
    #[doc = ""]
    pub const COM_INIT_MODE_STA: Type = 1;
    #[doc = ""]
    pub const COM_INIT_MODE_MTA: Type = 2;
}
pub mod cef_value_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const VTYPE_INVALID: Type = 0;
    pub const VTYPE_NULL: Type = 1;
    pub const VTYPE_BOOL: Type = 2;
    pub const VTYPE_INT: Type = 3;
    pub const VTYPE_DOUBLE: Type = 4;
    pub const VTYPE_STRING: Type = 5;
    pub const VTYPE_BINARY: Type = 6;
    pub const VTYPE_DICTIONARY: Type = 7;
    pub const VTYPE_LIST: Type = 8;
}
pub mod cef_jsdialog_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const JSDIALOGTYPE_ALERT: Type = 0;
    pub const JSDIALOGTYPE_CONFIRM: Type = 1;
    pub const JSDIALOGTYPE_PROMPT: Type = 2;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_screen_info_t {
    #[doc = ""]
    pub device_scale_factor: f32,
    #[doc = ""]
    pub depth: ::std::os::raw::c_int,
    #[doc = ""]
    pub depth_per_component: ::std::os::raw::c_int,
    #[doc = ""]
    pub is_monochrome: ::std::os::raw::c_int,
    #[doc = ""]
    pub rect: cef_rect_t,
    #[doc = ""]
    pub available_rect: cef_rect_t,
}
#[test]
fn bindgen_test_layout__cef_screen_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_screen_info_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_screen_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_screen_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_screen_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_screen_info_t>())).device_scale_factor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(device_scale_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_screen_info_t>())).depth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_screen_info_t>())).depth_per_component as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(depth_per_component)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_screen_info_t>())).is_monochrome as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(is_monochrome)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_screen_info_t>())).rect as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_screen_info_t>())).available_rect as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_screen_info_t),
            "::",
            stringify!(available_rect)
        )
    );
}
#[doc = ""]
pub type cef_screen_info_t = _cef_screen_info_t;
pub mod cef_menu_id_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const MENU_ID_BACK: Type = 100;
    pub const MENU_ID_FORWARD: Type = 101;
    pub const MENU_ID_RELOAD: Type = 102;
    pub const MENU_ID_RELOAD_NOCACHE: Type = 103;
    pub const MENU_ID_STOPLOAD: Type = 104;
    pub const MENU_ID_UNDO: Type = 110;
    pub const MENU_ID_REDO: Type = 111;
    pub const MENU_ID_CUT: Type = 112;
    pub const MENU_ID_COPY: Type = 113;
    pub const MENU_ID_PASTE: Type = 114;
    pub const MENU_ID_DELETE: Type = 115;
    pub const MENU_ID_SELECT_ALL: Type = 116;
    pub const MENU_ID_FIND: Type = 130;
    pub const MENU_ID_PRINT: Type = 131;
    pub const MENU_ID_VIEW_SOURCE: Type = 132;
    pub const MENU_ID_SPELLCHECK_SUGGESTION_0: Type = 200;
    pub const MENU_ID_SPELLCHECK_SUGGESTION_1: Type = 201;
    pub const MENU_ID_SPELLCHECK_SUGGESTION_2: Type = 202;
    pub const MENU_ID_SPELLCHECK_SUGGESTION_3: Type = 203;
    pub const MENU_ID_SPELLCHECK_SUGGESTION_4: Type = 204;
    pub const MENU_ID_SPELLCHECK_SUGGESTION_LAST: Type = 204;
    pub const MENU_ID_NO_SPELLING_SUGGESTIONS: Type = 205;
    pub const MENU_ID_ADD_TO_DICTIONARY: Type = 206;
    pub const MENU_ID_CUSTOM_FIRST: Type = 220;
    pub const MENU_ID_CUSTOM_LAST: Type = 250;
    pub const MENU_ID_USER_FIRST: Type = 26500;
    pub const MENU_ID_USER_LAST: Type = 28500;
}
pub mod cef_mouse_button_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const MBT_LEFT: Type = 0;
    pub const MBT_MIDDLE: Type = 1;
    pub const MBT_RIGHT: Type = 2;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_mouse_event_t {
    #[doc = ""]
    pub x: ::std::os::raw::c_int,
    #[doc = ""]
    pub y: ::std::os::raw::c_int,
    #[doc = ""]
    pub modifiers: uint32,
}
#[test]
fn bindgen_test_layout__cef_mouse_event_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_mouse_event_t>(),
        12usize,
        concat!("Size of: ", stringify!(_cef_mouse_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_mouse_event_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_mouse_event_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_mouse_event_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_mouse_event_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_mouse_event_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_mouse_event_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_mouse_event_t>())).modifiers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_mouse_event_t),
            "::",
            stringify!(modifiers)
        )
    );
}
#[doc = ""]
pub type cef_mouse_event_t = _cef_mouse_event_t;
pub mod cef_touch_event_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_TET_RELEASED: Type = 0;
    pub const CEF_TET_PRESSED: Type = 1;
    pub const CEF_TET_MOVED: Type = 2;
    pub const CEF_TET_CANCELLED: Type = 3;
}
pub mod cef_pointer_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_POINTER_TYPE_TOUCH: Type = 0;
    pub const CEF_POINTER_TYPE_MOUSE: Type = 1;
    pub const CEF_POINTER_TYPE_PEN: Type = 2;
    pub const CEF_POINTER_TYPE_ERASER: Type = 3;
    pub const CEF_POINTER_TYPE_UNKNOWN: Type = 4;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_touch_event_t {
    #[doc = ""]
    pub id: ::std::os::raw::c_int,
    #[doc = ""]
    pub x: f32,
    #[doc = ""]
    pub y: f32,
    #[doc = ""]
    pub radius_x: f32,
    #[doc = ""]
    pub radius_y: f32,
    #[doc = ""]
    pub rotation_angle: f32,
    #[doc = ""]
    pub pressure: f32,
    #[doc = ""]
    pub type_: cef_touch_event_type_t::Type,
    #[doc = ""]
    pub modifiers: uint32,
    #[doc = ""]
    pub pointer_type: cef_pointer_type_t::Type,
}
#[test]
fn bindgen_test_layout__cef_touch_event_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_touch_event_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_touch_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_touch_event_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_touch_event_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).x as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).radius_x as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(radius_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).radius_y as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(radius_y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_touch_event_t>())).rotation_angle as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(rotation_angle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).pressure as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(pressure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).type_ as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).modifiers as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(modifiers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_touch_event_t>())).pointer_type as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_touch_event_t),
            "::",
            stringify!(pointer_type)
        )
    );
}
#[doc = ""]
pub type cef_touch_event_t = _cef_touch_event_t;
pub mod cef_paint_element_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const PET_VIEW: Type = 0;
    pub const PET_POPUP: Type = 1;
}
pub mod cef_event_flags_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const EVENTFLAG_NONE: Type = 0;
    pub const EVENTFLAG_CAPS_LOCK_ON: Type = 1;
    pub const EVENTFLAG_SHIFT_DOWN: Type = 2;
    pub const EVENTFLAG_CONTROL_DOWN: Type = 4;
    pub const EVENTFLAG_ALT_DOWN: Type = 8;
    pub const EVENTFLAG_LEFT_MOUSE_BUTTON: Type = 16;
    pub const EVENTFLAG_MIDDLE_MOUSE_BUTTON: Type = 32;
    pub const EVENTFLAG_RIGHT_MOUSE_BUTTON: Type = 64;
    pub const EVENTFLAG_COMMAND_DOWN: Type = 128;
    pub const EVENTFLAG_NUM_LOCK_ON: Type = 256;
    pub const EVENTFLAG_IS_KEY_PAD: Type = 512;
    pub const EVENTFLAG_IS_LEFT: Type = 1024;
    pub const EVENTFLAG_IS_RIGHT: Type = 2048;
    pub const EVENTFLAG_ALTGR_DOWN: Type = 4096;
}
pub mod cef_menu_item_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const MENUITEMTYPE_NONE: Type = 0;
    pub const MENUITEMTYPE_COMMAND: Type = 1;
    pub const MENUITEMTYPE_CHECK: Type = 2;
    pub const MENUITEMTYPE_RADIO: Type = 3;
    pub const MENUITEMTYPE_SEPARATOR: Type = 4;
    pub const MENUITEMTYPE_SUBMENU: Type = 5;
}
pub mod cef_context_menu_type_flags_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const CM_TYPEFLAG_NONE: Type = 0;
    #[doc = ""]
    pub const CM_TYPEFLAG_PAGE: Type = 1;
    #[doc = ""]
    pub const CM_TYPEFLAG_FRAME: Type = 2;
    #[doc = ""]
    pub const CM_TYPEFLAG_LINK: Type = 4;
    #[doc = ""]
    pub const CM_TYPEFLAG_MEDIA: Type = 8;
    #[doc = ""]
    pub const CM_TYPEFLAG_SELECTION: Type = 16;
    #[doc = ""]
    pub const CM_TYPEFLAG_EDITABLE: Type = 32;
}
pub mod cef_context_menu_media_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const CM_MEDIATYPE_NONE: Type = 0;
    #[doc = ""]
    pub const CM_MEDIATYPE_IMAGE: Type = 1;
    #[doc = ""]
    pub const CM_MEDIATYPE_VIDEO: Type = 2;
    #[doc = ""]
    pub const CM_MEDIATYPE_AUDIO: Type = 3;
    #[doc = ""]
    pub const CM_MEDIATYPE_FILE: Type = 4;
    #[doc = ""]
    pub const CM_MEDIATYPE_PLUGIN: Type = 5;
}
pub mod cef_context_menu_media_state_flags_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CM_MEDIAFLAG_NONE: Type = 0;
    pub const CM_MEDIAFLAG_ERROR: Type = 1;
    pub const CM_MEDIAFLAG_PAUSED: Type = 2;
    pub const CM_MEDIAFLAG_MUTED: Type = 4;
    pub const CM_MEDIAFLAG_LOOP: Type = 8;
    pub const CM_MEDIAFLAG_CAN_SAVE: Type = 16;
    pub const CM_MEDIAFLAG_HAS_AUDIO: Type = 32;
    pub const CM_MEDIAFLAG_HAS_VIDEO: Type = 64;
    pub const CM_MEDIAFLAG_CONTROL_ROOT_ELEMENT: Type = 128;
    pub const CM_MEDIAFLAG_CAN_PRINT: Type = 256;
    pub const CM_MEDIAFLAG_CAN_ROTATE: Type = 512;
}
pub mod cef_context_menu_edit_state_flags_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CM_EDITFLAG_NONE: Type = 0;
    pub const CM_EDITFLAG_CAN_UNDO: Type = 1;
    pub const CM_EDITFLAG_CAN_REDO: Type = 2;
    pub const CM_EDITFLAG_CAN_CUT: Type = 4;
    pub const CM_EDITFLAG_CAN_COPY: Type = 8;
    pub const CM_EDITFLAG_CAN_PASTE: Type = 16;
    pub const CM_EDITFLAG_CAN_DELETE: Type = 32;
    pub const CM_EDITFLAG_CAN_SELECT_ALL: Type = 64;
    pub const CM_EDITFLAG_CAN_TRANSLATE: Type = 128;
}
pub mod cef_key_event_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const KEYEVENT_RAWKEYDOWN: Type = 0;
    #[doc = ""]
    pub const KEYEVENT_KEYDOWN: Type = 1;
    #[doc = ""]
    pub const KEYEVENT_KEYUP: Type = 2;
    #[doc = ""]
    pub const KEYEVENT_CHAR: Type = 3;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_key_event_t {
    #[doc = ""]
    pub type_: cef_key_event_type_t::Type,
    #[doc = ""]
    pub modifiers: uint32,
    #[doc = ""]
    pub windows_key_code: ::std::os::raw::c_int,
    #[doc = ""]
    pub native_key_code: ::std::os::raw::c_int,
    #[doc = ""]
    pub is_system_key: ::std::os::raw::c_int,
    #[doc = ""]
    pub character: char16,
    #[doc = ""]
    pub unmodified_character: char16,
    #[doc = ""]
    pub focus_on_editable_field: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_key_event_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_key_event_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_key_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_key_event_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_key_event_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_key_event_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_key_event_t>())).modifiers as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(modifiers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_key_event_t>())).windows_key_code as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(windows_key_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_key_event_t>())).native_key_code as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(native_key_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_key_event_t>())).is_system_key as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(is_system_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_key_event_t>())).character as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(character)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_key_event_t>())).unmodified_character as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(unmodified_character)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_key_event_t>())).focus_on_editable_field as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_key_event_t),
            "::",
            stringify!(focus_on_editable_field)
        )
    );
}
#[doc = ""]
pub type cef_key_event_t = _cef_key_event_t;
pub mod cef_focus_source_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const FOCUS_SOURCE_NAVIGATION: Type = 0;
    #[doc = ""]
    pub const FOCUS_SOURCE_SYSTEM: Type = 1;
}
pub mod cef_navigation_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const NAVIGATION_LINK_CLICKED: Type = 0;
    pub const NAVIGATION_FORM_SUBMITTED: Type = 1;
    pub const NAVIGATION_BACK_FORWARD: Type = 2;
    pub const NAVIGATION_RELOAD: Type = 3;
    pub const NAVIGATION_FORM_RESUBMITTED: Type = 4;
    pub const NAVIGATION_OTHER: Type = 5;
}
pub mod cef_xml_encoding_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const XML_ENCODING_NONE: Type = 0;
    pub const XML_ENCODING_UTF8: Type = 1;
    pub const XML_ENCODING_UTF16LE: Type = 2;
    pub const XML_ENCODING_UTF16BE: Type = 3;
    pub const XML_ENCODING_ASCII: Type = 4;
}
pub mod cef_xml_node_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const XML_NODE_UNSUPPORTED: Type = 0;
    pub const XML_NODE_PROCESSING_INSTRUCTION: Type = 1;
    pub const XML_NODE_DOCUMENT_TYPE: Type = 2;
    pub const XML_NODE_ELEMENT_START: Type = 3;
    pub const XML_NODE_ELEMENT_END: Type = 4;
    pub const XML_NODE_ATTRIBUTE: Type = 5;
    pub const XML_NODE_TEXT: Type = 6;
    pub const XML_NODE_CDATA: Type = 7;
    pub const XML_NODE_ENTITY_REFERENCE: Type = 8;
    pub const XML_NODE_WHITESPACE: Type = 9;
    pub const XML_NODE_COMMENT: Type = 10;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_popup_features_t {
    pub x: ::std::os::raw::c_int,
    pub xSet: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub ySet: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub widthSet: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub heightSet: ::std::os::raw::c_int,
    pub menuBarVisible: ::std::os::raw::c_int,
    pub statusBarVisible: ::std::os::raw::c_int,
    pub toolBarVisible: ::std::os::raw::c_int,
    pub scrollbarsVisible: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_popup_features_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_popup_features_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_popup_features_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_popup_features_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_popup_features_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).xSet as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(xSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).ySet as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(ySet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).widthSet as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(widthSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).height as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_popup_features_t>())).heightSet as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(heightSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_popup_features_t>())).menuBarVisible as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(menuBarVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_popup_features_t>())).statusBarVisible as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(statusBarVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_popup_features_t>())).toolBarVisible as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(toolBarVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_popup_features_t>())).scrollbarsVisible as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_popup_features_t),
            "::",
            stringify!(scrollbarsVisible)
        )
    );
}
#[doc = ""]
pub type cef_popup_features_t = _cef_popup_features_t;
pub mod cef_dom_document_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const DOM_DOCUMENT_TYPE_UNKNOWN: Type = 0;
    pub const DOM_DOCUMENT_TYPE_HTML: Type = 1;
    pub const DOM_DOCUMENT_TYPE_XHTML: Type = 2;
    pub const DOM_DOCUMENT_TYPE_PLUGIN: Type = 3;
}
pub mod cef_dom_event_category_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const DOM_EVENT_CATEGORY_UNKNOWN: Type = 0;
    pub const DOM_EVENT_CATEGORY_UI: Type = 1;
    pub const DOM_EVENT_CATEGORY_MOUSE: Type = 2;
    pub const DOM_EVENT_CATEGORY_MUTATION: Type = 4;
    pub const DOM_EVENT_CATEGORY_KEYBOARD: Type = 8;
    pub const DOM_EVENT_CATEGORY_TEXT: Type = 16;
    pub const DOM_EVENT_CATEGORY_COMPOSITION: Type = 32;
    pub const DOM_EVENT_CATEGORY_DRAG: Type = 64;
    pub const DOM_EVENT_CATEGORY_CLIPBOARD: Type = 128;
    pub const DOM_EVENT_CATEGORY_MESSAGE: Type = 256;
    pub const DOM_EVENT_CATEGORY_WHEEL: Type = 512;
    pub const DOM_EVENT_CATEGORY_BEFORE_TEXT_INSERTED: Type = 1024;
    pub const DOM_EVENT_CATEGORY_OVERFLOW: Type = 2048;
    pub const DOM_EVENT_CATEGORY_PAGE_TRANSITION: Type = 4096;
    pub const DOM_EVENT_CATEGORY_POPSTATE: Type = 8192;
    pub const DOM_EVENT_CATEGORY_PROGRESS: Type = 16384;
    pub const DOM_EVENT_CATEGORY_XMLHTTPREQUEST_PROGRESS: Type = 32768;
}
pub mod cef_dom_event_phase_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const DOM_EVENT_PHASE_UNKNOWN: Type = 0;
    pub const DOM_EVENT_PHASE_CAPTURING: Type = 1;
    pub const DOM_EVENT_PHASE_AT_TARGET: Type = 2;
    pub const DOM_EVENT_PHASE_BUBBLING: Type = 3;
}
pub mod cef_dom_node_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const DOM_NODE_TYPE_UNSUPPORTED: Type = 0;
    pub const DOM_NODE_TYPE_ELEMENT: Type = 1;
    pub const DOM_NODE_TYPE_ATTRIBUTE: Type = 2;
    pub const DOM_NODE_TYPE_TEXT: Type = 3;
    pub const DOM_NODE_TYPE_CDATA_SECTION: Type = 4;
    pub const DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS: Type = 5;
    pub const DOM_NODE_TYPE_COMMENT: Type = 6;
    pub const DOM_NODE_TYPE_DOCUMENT: Type = 7;
    pub const DOM_NODE_TYPE_DOCUMENT_TYPE: Type = 8;
    pub const DOM_NODE_TYPE_DOCUMENT_FRAGMENT: Type = 9;
}
pub mod cef_file_dialog_mode_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const FILE_DIALOG_OPEN: Type = 0;
    #[doc = ""]
    pub const FILE_DIALOG_OPEN_MULTIPLE: Type = 1;
    #[doc = ""]
    pub const FILE_DIALOG_OPEN_FOLDER: Type = 2;
    #[doc = ""]
    pub const FILE_DIALOG_SAVE: Type = 3;
    #[doc = ""]
    pub const FILE_DIALOG_TYPE_MASK: Type = 255;
    #[doc = ""]
    pub const FILE_DIALOG_OVERWRITEPROMPT_FLAG: Type = 16777216;
    #[doc = ""]
    pub const FILE_DIALOG_HIDEREADONLY_FLAG: Type = 33554432;
}
pub mod cef_color_model_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const COLOR_MODEL_UNKNOWN: Type = 0;
    pub const COLOR_MODEL_GRAY: Type = 1;
    pub const COLOR_MODEL_COLOR: Type = 2;
    pub const COLOR_MODEL_CMYK: Type = 3;
    pub const COLOR_MODEL_CMY: Type = 4;
    pub const COLOR_MODEL_KCMY: Type = 5;
    pub const COLOR_MODEL_CMY_K: Type = 6;
    pub const COLOR_MODEL_BLACK: Type = 7;
    pub const COLOR_MODEL_GRAYSCALE: Type = 8;
    pub const COLOR_MODEL_RGB: Type = 9;
    pub const COLOR_MODEL_RGB16: Type = 10;
    pub const COLOR_MODEL_RGBA: Type = 11;
    pub const COLOR_MODEL_COLORMODE_COLOR: Type = 12;
    pub const COLOR_MODEL_COLORMODE_MONOCHROME: Type = 13;
    pub const COLOR_MODEL_HP_COLOR_COLOR: Type = 14;
    pub const COLOR_MODEL_HP_COLOR_BLACK: Type = 15;
    pub const COLOR_MODEL_PRINTOUTMODE_NORMAL: Type = 16;
    pub const COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY: Type = 17;
    pub const COLOR_MODEL_PROCESSCOLORMODEL_CMYK: Type = 18;
    pub const COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE: Type = 19;
    pub const COLOR_MODEL_PROCESSCOLORMODEL_RGB: Type = 20;
}
pub mod cef_duplex_mode_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const DUPLEX_MODE_UNKNOWN: Type = -1;
    pub const DUPLEX_MODE_SIMPLEX: Type = 0;
    pub const DUPLEX_MODE_LONG_EDGE: Type = 1;
    pub const DUPLEX_MODE_SHORT_EDGE: Type = 2;
}
pub mod cef_cursor_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CT_POINTER: Type = 0;
    pub const CT_CROSS: Type = 1;
    pub const CT_HAND: Type = 2;
    pub const CT_IBEAM: Type = 3;
    pub const CT_WAIT: Type = 4;
    pub const CT_HELP: Type = 5;
    pub const CT_EASTRESIZE: Type = 6;
    pub const CT_NORTHRESIZE: Type = 7;
    pub const CT_NORTHEASTRESIZE: Type = 8;
    pub const CT_NORTHWESTRESIZE: Type = 9;
    pub const CT_SOUTHRESIZE: Type = 10;
    pub const CT_SOUTHEASTRESIZE: Type = 11;
    pub const CT_SOUTHWESTRESIZE: Type = 12;
    pub const CT_WESTRESIZE: Type = 13;
    pub const CT_NORTHSOUTHRESIZE: Type = 14;
    pub const CT_EASTWESTRESIZE: Type = 15;
    pub const CT_NORTHEASTSOUTHWESTRESIZE: Type = 16;
    pub const CT_NORTHWESTSOUTHEASTRESIZE: Type = 17;
    pub const CT_COLUMNRESIZE: Type = 18;
    pub const CT_ROWRESIZE: Type = 19;
    pub const CT_MIDDLEPANNING: Type = 20;
    pub const CT_EASTPANNING: Type = 21;
    pub const CT_NORTHPANNING: Type = 22;
    pub const CT_NORTHEASTPANNING: Type = 23;
    pub const CT_NORTHWESTPANNING: Type = 24;
    pub const CT_SOUTHPANNING: Type = 25;
    pub const CT_SOUTHEASTPANNING: Type = 26;
    pub const CT_SOUTHWESTPANNING: Type = 27;
    pub const CT_WESTPANNING: Type = 28;
    pub const CT_MOVE: Type = 29;
    pub const CT_VERTICALTEXT: Type = 30;
    pub const CT_CELL: Type = 31;
    pub const CT_CONTEXTMENU: Type = 32;
    pub const CT_ALIAS: Type = 33;
    pub const CT_PROGRESS: Type = 34;
    pub const CT_NODROP: Type = 35;
    pub const CT_COPY: Type = 36;
    pub const CT_NONE: Type = 37;
    pub const CT_NOTALLOWED: Type = 38;
    pub const CT_ZOOMIN: Type = 39;
    pub const CT_ZOOMOUT: Type = 40;
    pub const CT_GRAB: Type = 41;
    pub const CT_GRABBING: Type = 42;
    pub const CT_MIDDLE_PANNING_VERTICAL: Type = 43;
    pub const CT_MIDDLE_PANNING_HORIZONTAL: Type = 44;
    pub const CT_CUSTOM: Type = 45;
    pub const CT_DND_NONE: Type = 46;
    pub const CT_DND_MOVE: Type = 47;
    pub const CT_DND_COPY: Type = 48;
    pub const CT_DND_LINK: Type = 49;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cursor_info_t {
    pub hotspot: cef_point_t,
    pub image_scale_factor: f32,
    pub buffer: *mut ::std::os::raw::c_void,
    pub size: cef_size_t,
}
#[test]
fn bindgen_test_layout__cef_cursor_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cursor_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_cursor_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cursor_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_cursor_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cursor_info_t>())).hotspot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cursor_info_t),
            "::",
            stringify!(hotspot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cursor_info_t>())).image_scale_factor as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cursor_info_t),
            "::",
            stringify!(image_scale_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cursor_info_t>())).buffer as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cursor_info_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cursor_info_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cursor_info_t),
            "::",
            stringify!(size)
        )
    );
}
#[doc = ""]
pub type cef_cursor_info_t = _cef_cursor_info_t;
pub mod cef_uri_unescape_rule_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const UU_NONE: Type = 0;
    #[doc = ""]
    pub const UU_NORMAL: Type = 1;
    #[doc = ""]
    pub const UU_SPACES: Type = 2;
    #[doc = ""]
    pub const UU_PATH_SEPARATORS: Type = 4;
    #[doc = ""]
    pub const UU_URL_SPECIAL_CHARS_EXCEPT_PATH_SEPARATORS: Type = 8;
    #[doc = ""]
    pub const UU_REPLACE_PLUS_WITH_SPACE: Type = 16;
}
pub mod cef_json_parser_options_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const JSON_PARSER_RFC: Type = 0;
    #[doc = ""]
    pub const JSON_PARSER_ALLOW_TRAILING_COMMAS: Type = 1;
}
pub mod cef_json_writer_options_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const JSON_WRITER_DEFAULT: Type = 0;
    #[doc = ""]
    pub const JSON_WRITER_OMIT_BINARY_VALUES: Type = 1;
    #[doc = ""]
    pub const JSON_WRITER_OMIT_DOUBLE_TYPE_PRESERVATION: Type = 2;
    #[doc = ""]
    pub const JSON_WRITER_PRETTY_PRINT: Type = 4;
}
pub mod cef_pdf_print_margin_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const PDF_PRINT_MARGIN_DEFAULT: Type = 0;
    #[doc = ""]
    pub const PDF_PRINT_MARGIN_NONE: Type = 1;
    #[doc = ""]
    pub const PDF_PRINT_MARGIN_MINIMUM: Type = 2;
    #[doc = ""]
    pub const PDF_PRINT_MARGIN_CUSTOM: Type = 3;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_pdf_print_settings_t {
    #[doc = ""]
    pub header_footer_title: cef_string_t,
    #[doc = ""]
    pub header_footer_url: cef_string_t,
    #[doc = ""]
    pub page_width: ::std::os::raw::c_int,
    pub page_height: ::std::os::raw::c_int,
    #[doc = ""]
    pub scale_factor: ::std::os::raw::c_int,
    #[doc = ""]
    pub margin_top: ::std::os::raw::c_int,
    pub margin_right: ::std::os::raw::c_int,
    pub margin_bottom: ::std::os::raw::c_int,
    pub margin_left: ::std::os::raw::c_int,
    #[doc = ""]
    pub margin_type: cef_pdf_print_margin_type_t::Type,
    #[doc = ""]
    pub header_footer_enabled: ::std::os::raw::c_int,
    #[doc = ""]
    pub selection_only: ::std::os::raw::c_int,
    #[doc = ""]
    pub landscape: ::std::os::raw::c_int,
    #[doc = ""]
    pub backgrounds_enabled: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_pdf_print_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_pdf_print_settings_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_pdf_print_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_pdf_print_settings_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_pdf_print_settings_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).header_footer_title as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(header_footer_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).header_footer_url as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(header_footer_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).page_width as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(page_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).page_height as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(page_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).scale_factor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(scale_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_top as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_top)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_right as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_bottom as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_bottom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_left as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).margin_type as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(margin_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).header_footer_enabled as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(header_footer_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).selection_only as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(selection_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).landscape as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(landscape)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_settings_t>())).backgrounds_enabled as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_settings_t),
            "::",
            stringify!(backgrounds_enabled)
        )
    );
}
#[doc = ""]
pub type cef_pdf_print_settings_t = _cef_pdf_print_settings_t;
pub mod cef_scale_factor_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const SCALE_FACTOR_NONE: Type = 0;
    pub const SCALE_FACTOR_100P: Type = 1;
    pub const SCALE_FACTOR_125P: Type = 2;
    pub const SCALE_FACTOR_133P: Type = 3;
    pub const SCALE_FACTOR_140P: Type = 4;
    pub const SCALE_FACTOR_150P: Type = 5;
    pub const SCALE_FACTOR_180P: Type = 6;
    pub const SCALE_FACTOR_200P: Type = 7;
    pub const SCALE_FACTOR_250P: Type = 8;
    pub const SCALE_FACTOR_300P: Type = 9;
}
pub mod cef_plugin_policy_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const PLUGIN_POLICY_ALLOW: Type = 0;
    #[doc = ""]
    pub const PLUGIN_POLICY_DETECT_IMPORTANT: Type = 1;
    #[doc = ""]
    pub const PLUGIN_POLICY_BLOCK: Type = 2;
    #[doc = ""]
    pub const PLUGIN_POLICY_DISABLE: Type = 3;
}
pub mod cef_referrer_policy_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE: Type = 0;
    #[doc = ""]
    pub const REFERRER_POLICY_DEFAULT: Type = 0;
    #[doc = ""]
    pub const REFERRER_POLICY_REDUCE_REFERRER_GRANULARITY_ON_TRANSITION_CROSS_ORIGIN: Type = 1;
    #[doc = ""]
    pub const REFERRER_POLICY_ORIGIN_ONLY_ON_TRANSITION_CROSS_ORIGIN: Type = 2;
    #[doc = ""]
    pub const REFERRER_POLICY_NEVER_CLEAR_REFERRER: Type = 3;
    #[doc = ""]
    pub const REFERRER_POLICY_ORIGIN: Type = 4;
    #[doc = ""]
    pub const REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_CROSS_ORIGIN: Type = 5;
    #[doc = ""]
    pub const REFERRER_POLICY_ORIGIN_CLEAR_ON_TRANSITION_FROM_SECURE_TO_INSECURE: Type = 6;
    #[doc = ""]
    pub const REFERRER_POLICY_NO_REFERRER: Type = 7;
    #[doc = ""]
    pub const REFERRER_POLICY_LAST_VALUE: Type = 7;
}
pub mod cef_response_filter_status_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const RESPONSE_FILTER_NEED_MORE_DATA: Type = 0;
    #[doc = ""]
    pub const RESPONSE_FILTER_DONE: Type = 1;
    #[doc = ""]
    pub const RESPONSE_FILTER_ERROR: Type = 2;
}
pub mod cef_color_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const CEF_COLOR_TYPE_RGBA_8888: Type = 0;
    #[doc = ""]
    pub const CEF_COLOR_TYPE_BGRA_8888: Type = 1;
}
pub mod cef_alpha_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const CEF_ALPHA_TYPE_OPAQUE: Type = 0;
    #[doc = ""]
    pub const CEF_ALPHA_TYPE_PREMULTIPLIED: Type = 1;
    #[doc = ""]
    pub const CEF_ALPHA_TYPE_POSTMULTIPLIED: Type = 2;
}
pub mod cef_text_style_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_TEXT_STYLE_BOLD: Type = 0;
    pub const CEF_TEXT_STYLE_ITALIC: Type = 1;
    pub const CEF_TEXT_STYLE_STRIKE: Type = 2;
    pub const CEF_TEXT_STYLE_DIAGONAL_STRIKE: Type = 3;
    pub const CEF_TEXT_STYLE_UNDERLINE: Type = 4;
}
pub mod cef_main_axis_alignment_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const CEF_MAIN_AXIS_ALIGNMENT_START: Type = 0;
    #[doc = ""]
    pub const CEF_MAIN_AXIS_ALIGNMENT_CENTER: Type = 1;
    #[doc = ""]
    pub const CEF_MAIN_AXIS_ALIGNMENT_END: Type = 2;
}
pub mod cef_cross_axis_alignment_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const CEF_CROSS_AXIS_ALIGNMENT_STRETCH: Type = 0;
    #[doc = ""]
    pub const CEF_CROSS_AXIS_ALIGNMENT_START: Type = 1;
    #[doc = ""]
    pub const CEF_CROSS_AXIS_ALIGNMENT_CENTER: Type = 2;
    #[doc = ""]
    pub const CEF_CROSS_AXIS_ALIGNMENT_END: Type = 3;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_box_layout_settings_t {
    #[doc = ""]
    pub horizontal: ::std::os::raw::c_int,
    #[doc = ""]
    pub inside_border_horizontal_spacing: ::std::os::raw::c_int,
    #[doc = ""]
    pub inside_border_vertical_spacing: ::std::os::raw::c_int,
    #[doc = ""]
    pub inside_border_insets: cef_insets_t,
    #[doc = ""]
    pub between_child_spacing: ::std::os::raw::c_int,
    #[doc = ""]
    pub main_axis_alignment: cef_main_axis_alignment_t::Type,
    #[doc = ""]
    pub cross_axis_alignment: cef_cross_axis_alignment_t::Type,
    #[doc = ""]
    pub minimum_cross_axis_size: ::std::os::raw::c_int,
    #[doc = ""]
    pub default_flex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_box_layout_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_box_layout_settings_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_box_layout_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_box_layout_settings_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_box_layout_settings_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_box_layout_settings_t>())).horizontal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_box_layout_settings_t),
            "::",
            stringify!(horizontal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_box_layout_settings_t>())).inside_border_horizontal_spacing
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_box_layout_settings_t),
            "::",
            stringify!(inside_border_horizontal_spacing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_box_layout_settings_t>())).inside_border_vertical_spacing
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_box_layout_settings_t),
            "::",
            stringify!(inside_border_vertical_spacing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_box_layout_settings_t>())).inside_border_insets as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_box_layout_settings_t),
            "::",
            stringify!(inside_border_insets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_box_layout_settings_t>())).between_child_spacing as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_box_layout_settings_t),
            "::",
            stringify!(between_child_spacing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_box_layout_settings_t>())).main_axis_alignment as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_box_layout_settings_t),
            "::",
            stringify!(main_axis_alignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_box_layout_settings_t>())).cross_axis_alignment as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_box_layout_settings_t),
            "::",
            stringify!(cross_axis_alignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_box_layout_settings_t>())).minimum_cross_axis_size
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_box_layout_settings_t),
            "::",
            stringify!(minimum_cross_axis_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_box_layout_settings_t>())).default_flex as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_box_layout_settings_t),
            "::",
            stringify!(default_flex)
        )
    );
}
#[doc = ""]
pub type cef_box_layout_settings_t = _cef_box_layout_settings_t;
pub mod cef_button_state_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_BUTTON_STATE_NORMAL: Type = 0;
    pub const CEF_BUTTON_STATE_HOVERED: Type = 1;
    pub const CEF_BUTTON_STATE_PRESSED: Type = 2;
    pub const CEF_BUTTON_STATE_DISABLED: Type = 3;
}
pub mod cef_horizontal_alignment_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const CEF_HORIZONTAL_ALIGNMENT_LEFT: Type = 0;
    #[doc = ""]
    pub const CEF_HORIZONTAL_ALIGNMENT_CENTER: Type = 1;
    #[doc = ""]
    pub const CEF_HORIZONTAL_ALIGNMENT_RIGHT: Type = 2;
}
pub mod cef_menu_anchor_position_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_MENU_ANCHOR_TOPLEFT: Type = 0;
    pub const CEF_MENU_ANCHOR_TOPRIGHT: Type = 1;
    pub const CEF_MENU_ANCHOR_BOTTOMCENTER: Type = 2;
}
pub mod cef_menu_color_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_MENU_COLOR_TEXT: Type = 0;
    pub const CEF_MENU_COLOR_TEXT_HOVERED: Type = 1;
    pub const CEF_MENU_COLOR_TEXT_ACCELERATOR: Type = 2;
    pub const CEF_MENU_COLOR_TEXT_ACCELERATOR_HOVERED: Type = 3;
    pub const CEF_MENU_COLOR_BACKGROUND: Type = 4;
    pub const CEF_MENU_COLOR_BACKGROUND_HOVERED: Type = 5;
    pub const CEF_MENU_COLOR_COUNT: Type = 6;
}
pub mod cef_ssl_version_t {
    pub type Type = ::std::os::raw::c_int;
    pub const SSL_CONNECTION_VERSION_UNKNOWN: Type = 0;
    pub const SSL_CONNECTION_VERSION_SSL2: Type = 1;
    pub const SSL_CONNECTION_VERSION_SSL3: Type = 2;
    pub const SSL_CONNECTION_VERSION_TLS1: Type = 3;
    pub const SSL_CONNECTION_VERSION_TLS1_1: Type = 4;
    pub const SSL_CONNECTION_VERSION_TLS1_2: Type = 5;
    pub const SSL_CONNECTION_VERSION_TLS1_3: Type = 6;
    pub const SSL_CONNECTION_VERSION_QUIC: Type = 7;
}
pub mod cef_ssl_content_status_t {
    pub type Type = ::std::os::raw::c_int;
    pub const SSL_CONTENT_NORMAL_CONTENT: Type = 0;
    pub const SSL_CONTENT_DISPLAYED_INSECURE_CONTENT: Type = 1;
    pub const SSL_CONTENT_RAN_INSECURE_CONTENT: Type = 2;
}
pub mod cef_scheme_options_t {
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_SCHEME_OPTION_NONE: Type = 0;
    #[doc = ""]
    pub const CEF_SCHEME_OPTION_STANDARD: Type = 1;
    #[doc = ""]
    pub const CEF_SCHEME_OPTION_LOCAL: Type = 2;
    #[doc = ""]
    pub const CEF_SCHEME_OPTION_DISPLAY_ISOLATED: Type = 4;
    #[doc = ""]
    pub const CEF_SCHEME_OPTION_SECURE: Type = 8;
    #[doc = ""]
    pub const CEF_SCHEME_OPTION_CORS_ENABLED: Type = 16;
    #[doc = ""]
    pub const CEF_SCHEME_OPTION_CSP_BYPASSING: Type = 32;
    #[doc = ""]
    pub const CEF_SCHEME_OPTION_FETCH_ENABLED: Type = 64;
}
pub mod cef_cdm_registration_error_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    #[doc = ""]
    pub const CEF_CDM_REGISTRATION_ERROR_NONE: Type = 0;
    #[doc = ""]
    pub const CEF_CDM_REGISTRATION_ERROR_INCORRECT_CONTENTS: Type = 1;
    #[doc = ""]
    pub const CEF_CDM_REGISTRATION_ERROR_INCOMPATIBLE: Type = 2;
    #[doc = ""]
    pub const CEF_CDM_REGISTRATION_ERROR_NOT_SUPPORTED: Type = 3;
}
pub mod cef_composition_underline_style_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_CUS_SOLID: Type = 0;
    pub const CEF_CUS_DOT: Type = 1;
    pub const CEF_CUS_DASH: Type = 2;
    pub const CEF_CUS_NONE: Type = 3;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_composition_underline_t {
    #[doc = ""]
    pub range: cef_range_t,
    #[doc = ""]
    pub color: cef_color_t,
    #[doc = ""]
    pub background_color: cef_color_t,
    #[doc = ""]
    pub thick: ::std::os::raw::c_int,
    #[doc = ""]
    pub style: cef_composition_underline_style_t::Type,
}
#[test]
fn bindgen_test_layout__cef_composition_underline_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_composition_underline_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_composition_underline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_composition_underline_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_composition_underline_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_composition_underline_t>())).range as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_composition_underline_t),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_composition_underline_t>())).color as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_composition_underline_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_composition_underline_t>())).background_color as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_composition_underline_t),
            "::",
            stringify!(background_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_composition_underline_t>())).thick as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_composition_underline_t),
            "::",
            stringify!(thick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_composition_underline_t>())).style as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_composition_underline_t),
            "::",
            stringify!(style)
        )
    );
}
#[doc = ""]
pub type cef_composition_underline_t = _cef_composition_underline_t;
pub mod cef_channel_layout_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_CHANNEL_LAYOUT_NONE: Type = 0;
    pub const CEF_CHANNEL_LAYOUT_UNSUPPORTED: Type = 1;
    pub const CEF_CHANNEL_LAYOUT_MONO: Type = 2;
    pub const CEF_CHANNEL_LAYOUT_STEREO: Type = 3;
    pub const CEF_CHANNEL_LAYOUT_2_1: Type = 4;
    pub const CEF_CHANNEL_LAYOUT_SURROUND: Type = 5;
    pub const CEF_CHANNEL_LAYOUT_4_0: Type = 6;
    pub const CEF_CHANNEL_LAYOUT_2_2: Type = 7;
    pub const CEF_CHANNEL_LAYOUT_QUAD: Type = 8;
    pub const CEF_CHANNEL_LAYOUT_5_0: Type = 9;
    pub const CEF_CHANNEL_LAYOUT_5_1: Type = 10;
    pub const CEF_CHANNEL_LAYOUT_5_0_BACK: Type = 11;
    pub const CEF_CHANNEL_LAYOUT_5_1_BACK: Type = 12;
    pub const CEF_CHANNEL_LAYOUT_7_0: Type = 13;
    pub const CEF_CHANNEL_LAYOUT_7_1: Type = 14;
    pub const CEF_CHANNEL_LAYOUT_7_1_WIDE: Type = 15;
    pub const CEF_CHANNEL_LAYOUT_STEREO_DOWNMIX: Type = 16;
    pub const CEF_CHANNEL_LAYOUT_2POINT1: Type = 17;
    pub const CEF_CHANNEL_LAYOUT_3_1: Type = 18;
    pub const CEF_CHANNEL_LAYOUT_4_1: Type = 19;
    pub const CEF_CHANNEL_LAYOUT_6_0: Type = 20;
    pub const CEF_CHANNEL_LAYOUT_6_0_FRONT: Type = 21;
    pub const CEF_CHANNEL_LAYOUT_HEXAGONAL: Type = 22;
    pub const CEF_CHANNEL_LAYOUT_6_1: Type = 23;
    pub const CEF_CHANNEL_LAYOUT_6_1_BACK: Type = 24;
    pub const CEF_CHANNEL_LAYOUT_6_1_FRONT: Type = 25;
    pub const CEF_CHANNEL_LAYOUT_7_0_FRONT: Type = 26;
    pub const CEF_CHANNEL_LAYOUT_7_1_WIDE_BACK: Type = 27;
    pub const CEF_CHANNEL_LAYOUT_OCTAGONAL: Type = 28;
    pub const CEF_CHANNEL_LAYOUT_DISCRETE: Type = 29;
    pub const CEF_CHANNEL_LAYOUT_STEREO_AND_KEYBOARD_MIC: Type = 30;
    pub const CEF_CHANNEL_LAYOUT_4_1_QUAD_SIDE: Type = 31;
    pub const CEF_CHANNEL_LAYOUT_BITSTREAM: Type = 32;
    pub const CEF_CHANNEL_LAYOUT_MAX: Type = 32;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_audio_parameters_t {
    #[doc = ""]
    pub channel_layout: cef_channel_layout_t::Type,
    #[doc = ""]
    pub sample_rate: ::std::os::raw::c_int,
    #[doc = ""]
    pub frames_per_buffer: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_audio_parameters_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_audio_parameters_t>(),
        12usize,
        concat!("Size of: ", stringify!(_cef_audio_parameters_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_audio_parameters_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_audio_parameters_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_audio_parameters_t>())).channel_layout as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_audio_parameters_t),
            "::",
            stringify!(channel_layout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_audio_parameters_t>())).sample_rate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_audio_parameters_t),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_audio_parameters_t>())).frames_per_buffer as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_audio_parameters_t),
            "::",
            stringify!(frames_per_buffer)
        )
    );
}
#[doc = ""]
pub type cef_audio_parameters_t = _cef_audio_parameters_t;
pub mod cef_media_route_create_result_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_MRCR_UNKNOWN_ERROR: Type = 0;
    pub const CEF_MRCR_OK: Type = 1;
    pub const CEF_MRCR_TIMED_OUT: Type = 2;
    pub const CEF_MRCR_ROUTE_NOT_FOUND: Type = 3;
    pub const CEF_MRCR_SINK_NOT_FOUND: Type = 4;
    pub const CEF_MRCR_INVALID_ORIGIN: Type = 5;
    pub const CEF_MRCR_NO_SUPPORTED_PROVIDER: Type = 7;
    pub const CEF_MRCR_CANCELLED: Type = 8;
    pub const CEF_MRCR_ROUTE_ALREADY_EXISTS: Type = 9;
    pub const CEF_MRCR_ROUTE_ALREADY_TERMINATED: Type = 11;
    pub const CEF_MRCR_TOTAL_COUNT: Type = 12;
}
pub mod cef_media_route_connection_state_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_MRCS_UNKNOWN: Type = 0;
    pub const CEF_MRCS_CONNECTING: Type = 1;
    pub const CEF_MRCS_CONNECTED: Type = 2;
    pub const CEF_MRCS_CLOSED: Type = 3;
    pub const CEF_MRCS_TERMINATED: Type = 4;
}
pub mod cef_media_sink_icon_type_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_MSIT_CAST: Type = 0;
    pub const CEF_MSIT_CAST_AUDIO_GROUP: Type = 1;
    pub const CEF_MSIT_CAST_AUDIO: Type = 2;
    pub const CEF_MSIT_MEETING: Type = 3;
    pub const CEF_MSIT_HANGOUT: Type = 4;
    pub const CEF_MSIT_EDUCATION: Type = 5;
    pub const CEF_MSIT_WIRED_DISPLAY: Type = 6;
    pub const CEF_MSIT_GENERIC: Type = 7;
    pub const CEF_MSIT_TOTAL_COUNT: Type = 8;
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_sink_device_info_t {
    pub ip_address: cef_string_t,
    pub port: ::std::os::raw::c_int,
    pub model_name: cef_string_t,
}
#[test]
fn bindgen_test_layout__cef_media_sink_device_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_media_sink_device_info_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_media_sink_device_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_media_sink_device_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_media_sink_device_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_sink_device_info_t>())).ip_address as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_device_info_t),
            "::",
            stringify!(ip_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_sink_device_info_t>())).port as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_device_info_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_sink_device_info_t>())).model_name as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_device_info_t),
            "::",
            stringify!(model_name)
        )
    );
}
#[doc = ""]
pub type cef_media_sink_device_info_t = _cef_media_sink_device_info_t;
pub mod cef_text_field_commands_t {
    #[doc = ""]
    pub type Type = ::std::os::raw::c_int;
    pub const CEF_TFC_CUT: Type = 1;
    pub const CEF_TFC_COPY: Type = 2;
    pub const CEF_TFC_PASTE: Type = 3;
    pub const CEF_TFC_UNDO: Type = 4;
    pub const CEF_TFC_DELETE: Type = 5;
    pub const CEF_TFC_SELECT_ALL: Type = 6;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_base_ref_counted_t {
    #[doc = ""]
    pub size: usize,
    #[doc = ""]
    pub add_ref:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_base_ref_counted_t)>,
    #[doc = ""]
    pub release: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub has_one_ref: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub has_at_least_one_ref: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_base_ref_counted_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_base_ref_counted_t>(),
        20usize,
        concat!("Size of: ", stringify!(_cef_base_ref_counted_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_base_ref_counted_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_base_ref_counted_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).add_ref as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(add_ref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).release as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).has_one_ref as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(has_one_ref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_base_ref_counted_t>())).has_at_least_one_ref as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_ref_counted_t),
            "::",
            stringify!(has_at_least_one_ref)
        )
    );
}
#[doc = ""]
pub type cef_base_ref_counted_t = _cef_base_ref_counted_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_base_scoped_t {
    #[doc = ""]
    pub size: usize,
    #[doc = ""]
    pub del: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_base_scoped_t)>,
}
#[test]
fn bindgen_test_layout__cef_base_scoped_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_base_scoped_t>(),
        8usize,
        concat!("Size of: ", stringify!(_cef_base_scoped_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_base_scoped_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_base_scoped_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_scoped_t>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_scoped_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_base_scoped_t>())).del as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_base_scoped_t),
            "::",
            stringify!(del)
        )
    );
}
#[doc = ""]
pub type cef_base_scoped_t = _cef_base_scoped_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_dev_tools_message_observer_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_dev_tools_message: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_dev_tools_method_result: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            message_id: ::std::os::raw::c_int,
            success: ::std::os::raw::c_int,
            result: *const ::std::os::raw::c_void,
            result_size: usize,
        ),
    >,
    #[doc = ""]
    pub on_dev_tools_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            method: *const cef_string_t,
            params: *const ::std::os::raw::c_void,
            params_size: usize,
        ),
    >,
    #[doc = ""]
    pub on_dev_tools_agent_attached: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    #[doc = ""]
    pub on_dev_tools_agent_detached: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_dev_tools_message_observer_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_dev_tools_message_observer_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_dev_tools_message_observer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_dev_tools_message_observer_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_dev_tools_message_observer_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dev_tools_message_observer_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dev_tools_message_observer_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dev_tools_message_observer_t>())).on_dev_tools_message
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dev_tools_message_observer_t),
            "::",
            stringify!(on_dev_tools_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dev_tools_message_observer_t>())).on_dev_tools_method_result
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dev_tools_message_observer_t),
            "::",
            stringify!(on_dev_tools_method_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dev_tools_message_observer_t>())).on_dev_tools_event
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dev_tools_message_observer_t),
            "::",
            stringify!(on_dev_tools_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dev_tools_message_observer_t>()))
                .on_dev_tools_agent_attached as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dev_tools_message_observer_t),
            "::",
            stringify!(on_dev_tools_agent_attached)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dev_tools_message_observer_t>()))
                .on_dev_tools_agent_detached as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dev_tools_message_observer_t),
            "::",
            stringify!(on_dev_tools_agent_detached)
        )
    );
}
#[doc = ""]
pub type cef_dev_tools_message_observer_t = _cef_dev_tools_message_observer_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_value_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_owned: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_equal: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub copy: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> *mut _cef_value_t,
    >,
    #[doc = ""]
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> cef_value_type_t::Type,
    >,
    #[doc = ""]
    pub get_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_int: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_double:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> f64>,
    #[doc = ""]
    pub get_string: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_binary: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> *mut _cef_binary_value_t,
    >,
    #[doc = ""]
    pub get_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> *mut _cef_dictionary_value_t,
    >,
    #[doc = ""]
    pub get_list: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> *mut _cef_list_value_t,
    >,
    #[doc = ""]
    pub set_null: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_int: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_double: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_value_t, value: f64) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_binary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_list: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_value_t>(),
        108usize,
        concat!("Size of: ", stringify!(_cef_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_value_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_valid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_owned as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_owned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_read_only as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_same as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).is_equal as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(is_equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).copy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_type as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_bool as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_int as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_double as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_string as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_binary as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_dictionary as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_dictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).get_list as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(get_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_null as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_bool as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_int as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_double as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_string as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_binary as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_dictionary as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_dictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_value_t>())).set_list as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_value_t),
            "::",
            stringify!(set_list)
        )
    );
}
#[doc = ""]
pub type cef_value_t = _cef_value_t;
extern "C" {
    #[doc = ""]
    pub fn cef_value_create() -> *mut cef_value_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_binary_value_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_owned: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_equal: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub copy: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_binary_value_t) -> *mut _cef_binary_value_t,
    >,
    #[doc = ""]
    pub get_size:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_binary_value_t) -> usize>,
    #[doc = ""]
    pub get_data: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_binary_value_t,
            buffer: *mut ::std::os::raw::c_void,
            buffer_size: usize,
            data_offset: usize,
        ) -> usize,
    >,
}
#[test]
fn bindgen_test_layout__cef_binary_value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_binary_value_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_binary_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_binary_value_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_binary_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).is_valid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).is_owned as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(is_owned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).is_same as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).is_equal as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(is_equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).copy as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).get_size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_binary_value_t>())).get_data as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_binary_value_t),
            "::",
            stringify!(get_data)
        )
    );
}
#[doc = ""]
pub type cef_binary_value_t = _cef_binary_value_t;
extern "C" {
    #[doc = ""]
    pub fn cef_binary_value_create(
        data: *const ::std::os::raw::c_void, data_size: usize,
    ) -> *mut cef_binary_value_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_dictionary_value_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_owned: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_equal: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub copy: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            exclude_empty_children: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    #[doc = ""]
    pub get_size: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_dictionary_value_t) -> usize,
    >,
    #[doc = ""]
    pub clear: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub has_key: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_keys: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            keys: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub remove: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> cef_value_type_t::Type,
    >,
    #[doc = ""]
    pub get_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_value_t,
    >,
    #[doc = ""]
    pub get_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_int: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_double: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> f64,
    >,
    #[doc = ""]
    pub get_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_binary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_binary_value_t,
    >,
    #[doc = ""]
    pub get_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_dictionary_value_t,
    >,
    #[doc = ""]
    pub get_list: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_list_value_t,
    >,
    #[doc = ""]
    pub set_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_null: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_int: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_double: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_binary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_list: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_dictionary_value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_dictionary_value_t>(),
        136usize,
        concat!("Size of: ", stringify!(_cef_dictionary_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_dictionary_value_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_dictionary_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_valid as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_owned as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_owned)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_read_only as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_same as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).is_equal as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(is_equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).copy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_size as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).clear as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).has_key as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(has_key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_keys as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).remove as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_type as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_value as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_bool as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_int as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_int)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_double as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_double)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_string as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_binary as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_binary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_dictionary as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_dictionary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).get_list as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(get_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_value as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_null as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_null)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_bool as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_int as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_int)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_double as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_double)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_string as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_binary as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_binary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_dictionary as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_dictionary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dictionary_value_t>())).set_list as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dictionary_value_t),
            "::",
            stringify!(set_list)
        )
    );
}
#[doc = ""]
pub type cef_dictionary_value_t = _cef_dictionary_value_t;
extern "C" {
    #[doc = ""]
    pub fn cef_dictionary_value_create() -> *mut cef_dictionary_value_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_list_value_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_owned: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_equal: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub copy: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t) -> *mut _cef_list_value_t,
    >,
    #[doc = ""]
    pub set_size: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_size:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t) -> usize>,
    #[doc = ""]
    pub clear: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub remove: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> cef_value_type_t::Type,
    >,
    #[doc = ""]
    pub get_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_value_t,
    >,
    #[doc = ""]
    pub get_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_int: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_double: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_list_value_t, index: usize) -> f64,
    >,
    #[doc = ""]
    pub get_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_binary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_binary_value_t,
    >,
    #[doc = ""]
    pub get_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_dictionary_value_t,
    >,
    #[doc = ""]
    pub get_list: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_list_value_t,
    >,
    #[doc = ""]
    pub set_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_null: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_int: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_double: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_binary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_list: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_list_value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_list_value_t>(),
        132usize,
        concat!("Size of: ", stringify!(_cef_list_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_list_value_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_list_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_valid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_owned as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_owned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_read_only as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_same as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).is_equal as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(is_equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).copy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_size as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).clear as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).remove as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_type as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_value as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_bool as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_int as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_double as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_string as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_binary as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_binary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_list_value_t>())).get_dictionary as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_dictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).get_list as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(get_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_value as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_null as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_bool as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_int as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_double as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_string as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_binary as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_binary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_list_value_t>())).set_dictionary as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_dictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_list_value_t>())).set_list as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_list_value_t),
            "::",
            stringify!(set_list)
        )
    );
}
#[doc = ""]
pub type cef_list_value_t = _cef_list_value_t;
extern "C" {
    #[doc = ""]
    pub fn cef_list_value_create() -> *mut cef_list_value_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_image_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_empty: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_image_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            that: *mut _cef_image_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub add_bitmap: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            pixel_width: ::std::os::raw::c_int,
            pixel_height: ::std::os::raw::c_int,
            color_type: cef_color_type_t::Type,
            alpha_type: cef_alpha_type_t::Type,
            pixel_data: *const ::std::os::raw::c_void,
            pixel_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub add_png: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            png_data: *const ::std::os::raw::c_void,
            png_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub add_jpeg: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            jpeg_data: *const ::std::os::raw::c_void,
            jpeg_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_width:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_image_t) -> usize>,
    #[doc = ""]
    pub get_height:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_image_t) -> usize>,
    #[doc = ""]
    pub has_representation: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub remove_representation: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_representation_info: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            actual_scale_factor: *mut f32,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_as_bitmap: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            color_type: cef_color_type_t::Type,
            alpha_type: cef_alpha_type_t::Type,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
    #[doc = ""]
    pub get_as_png: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            with_transparency: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
    #[doc = ""]
    pub get_as_jpeg: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            quality: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_image_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_image_t>(),
        72usize,
        concat!("Size of: ", stringify!(_cef_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_image_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_image_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).is_empty as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(is_empty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).is_same as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).add_bitmap as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(add_bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).add_png as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(add_png)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).add_jpeg as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(add_jpeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_width as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_height as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).has_representation as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(has_representation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_image_t>())).remove_representation as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(remove_representation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_image_t>())).get_representation_info as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_representation_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_as_bitmap as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_as_bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_as_png as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_as_png)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_image_t>())).get_as_jpeg as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_image_t),
            "::",
            stringify!(get_as_jpeg)
        )
    );
}
#[doc = ""]
pub type cef_image_t = _cef_image_t;
extern "C" {
    #[doc = ""]
    pub fn cef_image_create() -> *mut cef_image_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_read_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub read: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_read_handler_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    #[doc = ""]
    pub seek: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_read_handler_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub tell:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_read_handler_t) -> int64>,
    #[doc = ""]
    pub eof: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_read_handler_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub may_block: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_read_handler_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_read_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_read_handler_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_read_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_read_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_read_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_read_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_read_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_read_handler_t>())).read as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_read_handler_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_read_handler_t>())).seek as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_read_handler_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_read_handler_t>())).tell as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_read_handler_t),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_read_handler_t>())).eof as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_read_handler_t),
            "::",
            stringify!(eof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_read_handler_t>())).may_block as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_read_handler_t),
            "::",
            stringify!(may_block)
        )
    );
}
#[doc = ""]
pub type cef_read_handler_t = _cef_read_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_stream_reader_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub read: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_stream_reader_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    #[doc = ""]
    pub seek: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_stream_reader_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub tell: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_stream_reader_t) -> int64,
    >,
    #[doc = ""]
    pub eof: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub may_block: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_stream_reader_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_stream_reader_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_stream_reader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_stream_reader_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_stream_reader_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).read as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).seek as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).tell as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).eof as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(eof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_reader_t>())).may_block as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_reader_t),
            "::",
            stringify!(may_block)
        )
    );
}
#[doc = ""]
pub type cef_stream_reader_t = _cef_stream_reader_t;
extern "C" {
    #[doc = ""]
    pub fn cef_stream_reader_create_for_file(
        fileName: *const cef_string_t,
    ) -> *mut cef_stream_reader_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_stream_reader_create_for_data(
        data: *mut ::std::os::raw::c_void, size: usize,
    ) -> *mut cef_stream_reader_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_stream_reader_create_for_handler(
        handler: *mut cef_read_handler_t,
    ) -> *mut cef_stream_reader_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_write_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub write: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_write_handler_t,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    #[doc = ""]
    pub seek: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_write_handler_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub tell: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_write_handler_t) -> int64,
    >,
    #[doc = ""]
    pub flush: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_write_handler_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub may_block: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_write_handler_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_write_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_write_handler_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_write_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_write_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_write_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_write_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_write_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_write_handler_t>())).write as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_write_handler_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_write_handler_t>())).seek as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_write_handler_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_write_handler_t>())).tell as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_write_handler_t),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_write_handler_t>())).flush as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_write_handler_t),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_write_handler_t>())).may_block as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_write_handler_t),
            "::",
            stringify!(may_block)
        )
    );
}
#[doc = ""]
pub type cef_write_handler_t = _cef_write_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_stream_writer_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub write: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_stream_writer_t,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    #[doc = ""]
    pub seek: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_stream_writer_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub tell: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_stream_writer_t) -> int64,
    >,
    #[doc = ""]
    pub flush: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub may_block: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_stream_writer_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_stream_writer_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_stream_writer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_stream_writer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_stream_writer_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).write as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).seek as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).tell as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).flush as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_stream_writer_t>())).may_block as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_stream_writer_t),
            "::",
            stringify!(may_block)
        )
    );
}
#[doc = ""]
pub type cef_stream_writer_t = _cef_stream_writer_t;
extern "C" {
    #[doc = ""]
    pub fn cef_stream_writer_create_for_file(
        fileName: *const cef_string_t,
    ) -> *mut cef_stream_writer_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_stream_writer_create_for_handler(
        handler: *mut cef_write_handler_t,
    ) -> *mut cef_stream_writer_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_drag_data_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub clone: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_drag_data_t,
    >,
    #[doc = ""]
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_link: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_fragment: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_file: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_link_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_link_title: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_link_metadata: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_fragment_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_fragment_html: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_fragment_base_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_file_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_file_contents: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_drag_data_t,
            writer: *mut _cef_stream_writer_t,
        ) -> usize,
    >,
    #[doc = ""]
    pub get_file_names: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_drag_data_t,
            names: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_link_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t, url: *const cef_string_t),
    >,
    #[doc = ""]
    pub set_link_title: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t, title: *const cef_string_t),
    >,
    #[doc = ""]
    pub set_link_metadata: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t, data: *const cef_string_t),
    >,
    #[doc = ""]
    pub set_fragment_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t, text: *const cef_string_t),
    >,
    #[doc = ""]
    pub set_fragment_html: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t, html: *const cef_string_t),
    >,
    #[doc = ""]
    pub set_fragment_base_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t, base_url: *const cef_string_t),
    >,
    #[doc = ""]
    pub reset_file_contents:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t)>,
    #[doc = ""]
    pub add_file: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_drag_data_t,
            path: *const cef_string_t,
            display_name: *const cef_string_t,
        ),
    >,
    #[doc = ""]
    pub get_image: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_image_t,
    >,
    #[doc = ""]
    pub get_image_hotspot: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> cef_point_t,
    >,
    #[doc = ""]
    pub has_image: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_drag_data_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_drag_data_t>(),
        120usize,
        concat!("Size of: ", stringify!(_cef_drag_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_drag_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_drag_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).clone as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(clone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).is_read_only as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).is_link as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(is_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).is_fragment as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(is_fragment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).is_file as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(is_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_link_url as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_link_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_link_title as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_link_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_link_metadata as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_link_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_fragment_text as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_fragment_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_fragment_html as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_fragment_html)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_fragment_base_url as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_fragment_base_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_file_name as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_file_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_file_contents as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_file_contents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_file_names as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_file_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).set_link_url as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_link_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).set_link_title as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_link_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).set_link_metadata as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_link_metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).set_fragment_text as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_fragment_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).set_fragment_html as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_fragment_html)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).set_fragment_base_url as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(set_fragment_base_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).reset_file_contents as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(reset_file_contents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).add_file as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(add_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).get_image as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_data_t>())).get_image_hotspot as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(get_image_hotspot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_data_t>())).has_image as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_data_t),
            "::",
            stringify!(has_image)
        )
    );
}
#[doc = ""]
pub type cef_drag_data_t = _cef_drag_data_t;
extern "C" {
    #[doc = ""]
    pub fn cef_drag_data_create() -> *mut cef_drag_data_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_domvisitor_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub visit: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domvisitor_t,
            document: *mut _cef_domdocument_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_domvisitor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_domvisitor_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_domvisitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_domvisitor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_domvisitor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domvisitor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domvisitor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domvisitor_t>())).visit as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domvisitor_t),
            "::",
            stringify!(visit)
        )
    );
}
#[doc = ""]
pub type cef_domvisitor_t = _cef_domvisitor_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_domdocument_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> cef_dom_document_type_t::Type,
    >,
    #[doc = ""]
    pub get_document: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    #[doc = ""]
    pub get_body: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    #[doc = ""]
    pub get_head: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    #[doc = ""]
    pub get_title: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_element_by_id: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domdocument_t,
            id: *const cef_string_t,
        ) -> *mut _cef_domnode_t,
    >,
    #[doc = ""]
    pub get_focused_node: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    #[doc = ""]
    pub has_selection: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_selection_start_offset: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_selection_end_offset: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_selection_as_markup: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_selection_as_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_base_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_complete_url: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domdocument_t,
            partialURL: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_domdocument_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_domdocument_t>(),
        76usize,
        concat!("Size of: ", stringify!(_cef_domdocument_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_domdocument_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_domdocument_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_type as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_document as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_document)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_body as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_head as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_title as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_element_by_id as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_element_by_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_focused_node as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_focused_node)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).has_selection as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(has_selection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_selection_start_offset as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_selection_start_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_selection_end_offset as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_selection_end_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_selection_as_markup as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_selection_as_markup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_selection_as_text as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_selection_as_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domdocument_t>())).get_base_url as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_base_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domdocument_t>())).get_complete_url as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domdocument_t),
            "::",
            stringify!(get_complete_url)
        )
    );
}
#[doc = ""]
pub type cef_domdocument_t = _cef_domdocument_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_domnode_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_dom_node_type_t::Type,
    >,
    #[doc = ""]
    pub is_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_element: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_editable: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_form_control_element: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_form_control_element_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domnode_t,
            that: *mut _cef_domnode_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_value: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub set_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domnode_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_as_markup: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_document: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domdocument_t,
    >,
    #[doc = ""]
    pub get_parent: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    #[doc = ""]
    pub get_previous_sibling: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    #[doc = ""]
    pub get_next_sibling: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    #[doc = ""]
    pub has_children: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_first_child: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    #[doc = ""]
    pub get_last_child: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    #[doc = ""]
    pub get_element_tag_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub has_element_attributes: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub has_element_attribute: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_element_attribute: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_element_attributes: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t, attrMap: cef_string_map_t),
    >,
    #[doc = ""]
    pub set_element_attribute: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_element_inner_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_element_bounds:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_domnode_t) -> cef_rect_t>,
}
#[test]
fn bindgen_test_layout__cef_domnode_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_domnode_t>(),
        124usize,
        concat!("Size of: ", stringify!(_cef_domnode_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_domnode_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_domnode_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_type as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).is_text as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).is_element as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_element)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).is_editable as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_editable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).is_form_control_element as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_form_control_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_form_control_element_type as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_form_control_element_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).is_same as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_name as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_value as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).set_value as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(set_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_as_markup as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_as_markup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_document as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_document)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_parent as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_previous_sibling as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_previous_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_next_sibling as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_next_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).has_children as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(has_children)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_first_child as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_first_child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_domnode_t>())).get_last_child as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_last_child)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_tag_name as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_tag_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).has_element_attributes as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(has_element_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).has_element_attribute as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(has_element_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_attribute as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_attributes as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).set_element_attribute as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(set_element_attribute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_inner_text as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_inner_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_domnode_t>())).get_element_bounds as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_domnode_t),
            "::",
            stringify!(get_element_bounds)
        )
    );
}
#[doc = ""]
pub type cef_domnode_t = _cef_domnode_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_process_message_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub copy: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_process_message_t,
        ) -> *mut _cef_process_message_t,
    >,
    #[doc = ""]
    pub get_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_process_message_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_argument_list: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_process_message_t) -> *mut _cef_list_value_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_process_message_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_process_message_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_process_message_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_process_message_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_process_message_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_process_message_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_process_message_t>())).is_valid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_process_message_t>())).is_read_only as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_process_message_t>())).copy as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_process_message_t>())).get_name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_process_message_t>())).get_argument_list as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_process_message_t),
            "::",
            stringify!(get_argument_list)
        )
    );
}
#[doc = ""]
pub type cef_process_message_t = _cef_process_message_t;
extern "C" {
    #[doc = ""]
    pub fn cef_process_message_create(name: *const cef_string_t) -> *mut cef_process_message_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_request_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub set_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, url: *const cef_string_t),
    >,
    #[doc = ""]
    pub get_method: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub set_method: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, method: *const cef_string_t),
    >,
    #[doc = ""]
    pub set_referrer: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_t,
            referrer_url: *const cef_string_t,
            policy: cef_referrer_policy_t::Type,
        ),
    >,
    #[doc = ""]
    pub get_referrer_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_referrer_policy: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_referrer_policy_t::Type,
    >,
    #[doc = ""]
    pub get_post_data: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> *mut _cef_post_data_t,
    >,
    #[doc = ""]
    pub set_post_data: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, postData: *mut _cef_post_data_t),
    >,
    #[doc = ""]
    pub get_header_map: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t),
    >,
    #[doc = ""]
    pub set_header_map: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t),
    >,
    #[doc = ""]
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub set: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_t,
            url: *const cef_string_t,
            method: *const cef_string_t,
            postData: *mut _cef_post_data_t,
            headerMap: cef_string_multimap_t,
        ),
    >,
    #[doc = ""]
    pub get_flags: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_flags: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, flags: ::std::os::raw::c_int),
    >,
    #[doc = ""]
    pub get_first_party_for_cookies: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub set_first_party_for_cookies: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t, url: *const cef_string_t),
    >,
    #[doc = ""]
    pub get_resource_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_resource_type_t::Type,
    >,
    #[doc = ""]
    pub get_transition_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> cef_transition_type_t::Type,
    >,
    #[doc = ""]
    pub get_identifier:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_request_t) -> uint64>,
}
#[test]
fn bindgen_test_layout__cef_request_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_t>(),
        108usize,
        concat!("Size of: ", stringify!(_cef_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_request_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).is_read_only as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_url as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_url as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_method as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_method as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_referrer as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_referrer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_referrer_url as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_referrer_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_referrer_policy as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_referrer_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_post_data as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_post_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_post_data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_post_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_header_map as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_header_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_header_map as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_header_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_header_by_name as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_header_by_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).set_header_by_name as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_header_by_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_flags as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).set_flags as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_first_party_for_cookies as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_first_party_for_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).set_first_party_for_cookies as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(set_first_party_for_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_resource_type as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_resource_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_t>())).get_transition_type as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_transition_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_t>())).get_identifier as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_t),
            "::",
            stringify!(get_identifier)
        )
    );
}
#[doc = ""]
pub type cef_request_t = _cef_request_t;
extern "C" {
    #[doc = ""]
    pub fn cef_request_create() -> *mut cef_request_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_post_data_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub has_excluded_elements: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_element_count:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_post_data_t) -> usize>,
    #[doc = ""]
    pub get_elements: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_t,
            elementsCount: *mut usize,
            elements: *mut *mut _cef_post_data_element_t,
        ),
    >,
    #[doc = ""]
    pub remove_element: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub add_element: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub remove_elements:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_post_data_t)>,
}
#[test]
fn bindgen_test_layout__cef_post_data_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_post_data_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_post_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_post_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_post_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).is_read_only as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_t>())).has_excluded_elements as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(has_excluded_elements)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_t>())).get_element_count as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(get_element_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).get_elements as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(get_elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).remove_element as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(remove_element)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_t>())).add_element as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(add_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_t>())).remove_elements as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_t),
            "::",
            stringify!(remove_elements)
        )
    );
}
#[doc = ""]
pub type cef_post_data_t = _cef_post_data_t;
extern "C" {
    #[doc = ""]
    pub fn cef_post_data_create() -> *mut cef_post_data_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_post_data_element_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_post_data_element_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_to_empty:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_post_data_element_t)>,
    #[doc = ""]
    pub set_to_file: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_element_t,
            fileName: *const cef_string_t,
        ),
    >,
    #[doc = ""]
    pub set_to_bytes: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *const ::std::os::raw::c_void,
        ),
    >,
    #[doc = ""]
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_element_t,
        ) -> cef_postdataelement_type_t::Type,
    >,
    #[doc = ""]
    pub get_file: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_post_data_element_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_bytes_count: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_post_data_element_t) -> usize,
    >,
    #[doc = ""]
    pub get_bytes: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *mut ::std::os::raw::c_void,
        ) -> usize,
    >,
}
#[test]
fn bindgen_test_layout__cef_post_data_element_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_post_data_element_t>(),
        52usize,
        concat!("Size of: ", stringify!(_cef_post_data_element_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_post_data_element_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_post_data_element_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_post_data_element_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).is_read_only as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).set_to_empty as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(set_to_empty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).set_to_file as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(set_to_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).set_to_bytes as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(set_to_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).get_type as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).get_file as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(get_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).get_bytes_count as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(get_bytes_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_post_data_element_t>())).get_bytes as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_post_data_element_t),
            "::",
            stringify!(get_bytes)
        )
    );
}
#[doc = ""]
pub type cef_post_data_element_t = _cef_post_data_element_t;
extern "C" {
    #[doc = ""]
    pub fn cef_post_data_element_create() -> *mut cef_post_data_element_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_string_visitor_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub visit: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_string_visitor_t, string: *const cef_string_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_string_visitor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_string_visitor_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_string_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_string_visitor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_string_visitor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_visitor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_visitor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_string_visitor_t>())).visit as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_string_visitor_t),
            "::",
            stringify!(visit)
        )
    );
}
#[doc = ""]
pub type cef_string_visitor_t = _cef_string_visitor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_urlrequest_client_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_urlrequest_t {
    _unused: [u8; 0],
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_frame_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub undo: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    #[doc = ""]
    pub redo: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    #[doc = ""]
    pub cut: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    #[doc = ""]
    pub copy: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    #[doc = ""]
    pub paste: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    #[doc = ""]
    pub del: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    #[doc = ""]
    pub select_all: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    #[doc = ""]
    pub view_source: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t)>,
    #[doc = ""]
    pub get_source: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t),
    >,
    #[doc = ""]
    pub get_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t),
    >,
    #[doc = ""]
    pub load_request: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t, request: *mut _cef_request_t),
    >,
    #[doc = ""]
    pub load_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t, url: *const cef_string_t),
    >,
    #[doc = ""]
    pub execute_java_script: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_frame_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub is_main: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_focused: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_identifier:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> int64>,
    #[doc = ""]
    pub get_parent: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> *mut _cef_frame_t,
    >,
    #[doc = ""]
    pub get_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> *mut _cef_browser_t,
    >,
    #[doc = ""]
    pub get_v8context: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t) -> *mut _cef_v8context_t,
    >,
    #[doc = ""]
    pub visit_dom: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_domvisitor_t),
    >,
    #[doc = ""]
    pub create_urlrequest: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            client: *mut _cef_urlrequest_client_t,
        ) -> *mut _cef_urlrequest_t,
    >,
    #[doc = ""]
    pub send_process_message: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_frame_t,
            target_process: cef_process_id_t::Type,
            message: *mut _cef_process_message_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_frame_t>(),
        120usize,
        concat!("Size of: ", stringify!(_cef_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_frame_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_frame_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).is_valid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).undo as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(undo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).redo as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(redo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).cut as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(cut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).copy as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).paste as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(paste)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).del as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(del)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).select_all as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(select_all)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).view_source as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(view_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_source as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_text as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).load_request as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(load_request)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).load_url as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(load_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_frame_t>())).execute_java_script as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(execute_java_script)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).is_main as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(is_main)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).is_focused as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(is_focused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_name as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_identifier as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_parent as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_url as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_browser as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_browser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).get_v8context as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(get_v8context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).visit_dom as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(visit_dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_frame_t>())).create_urlrequest as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(create_urlrequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_frame_t>())).send_process_message as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_frame_t),
            "::",
            stringify!(send_process_message)
        )
    );
}
#[doc = ""]
pub type cef_frame_t = _cef_frame_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_x509cert_principal_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_display_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_common_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_locality_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_state_or_province_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_country_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_street_addresses: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_x509cert_principal_t,
            addresses: cef_string_list_t,
        ),
    >,
    #[doc = ""]
    pub get_organization_names: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t),
    >,
    #[doc = ""]
    pub get_organization_unit_names: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t),
    >,
    #[doc = ""]
    pub get_domain_components: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_x509cert_principal_t,
            components: cef_string_list_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_x509cert_principal_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_x509cert_principal_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_x509cert_principal_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_x509cert_principal_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_x509cert_principal_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_display_name as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_display_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_common_name as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_common_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_locality_name as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_locality_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_state_or_province_name
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_state_or_province_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_country_name as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_country_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_street_addresses as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_street_addresses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_organization_names as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_organization_names)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_organization_unit_names
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_organization_unit_names)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509cert_principal_t>())).get_domain_components as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509cert_principal_t),
            "::",
            stringify!(get_domain_components)
        )
    );
}
#[doc = ""]
pub type cef_x509cert_principal_t = _cef_x509cert_principal_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_x509certificate_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_subject: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_x509certificate_t,
        ) -> *mut _cef_x509cert_principal_t,
    >,
    #[doc = ""]
    pub get_issuer: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_x509certificate_t,
        ) -> *mut _cef_x509cert_principal_t,
    >,
    #[doc = ""]
    pub get_serial_number: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    #[doc = ""]
    pub get_valid_start: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509certificate_t) -> cef_time_t,
    >,
    #[doc = ""]
    pub get_valid_expiry: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509certificate_t) -> cef_time_t,
    >,
    #[doc = ""]
    pub get_derencoded: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    #[doc = ""]
    pub get_pemencoded: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    #[doc = ""]
    pub get_issuer_chain_size: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_x509certificate_t) -> usize,
    >,
    #[doc = ""]
    pub get_derencoded_issuer_chain: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t,
        ),
    >,
    #[doc = ""]
    pub get_pemencoded_issuer_chain: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_x509certificate_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_x509certificate_t>(),
        60usize,
        concat!("Size of: ", stringify!(_cef_x509certificate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_x509certificate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_x509certificate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_x509certificate_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_subject as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_subject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_issuer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_issuer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_serial_number as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_serial_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_valid_start as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_valid_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_valid_expiry as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_valid_expiry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_derencoded as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_derencoded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_pemencoded as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_pemencoded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_issuer_chain_size as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_issuer_chain_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_derencoded_issuer_chain
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_derencoded_issuer_chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_x509certificate_t>())).get_pemencoded_issuer_chain
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_x509certificate_t),
            "::",
            stringify!(get_pemencoded_issuer_chain)
        )
    );
}
#[doc = ""]
pub type cef_x509certificate_t = _cef_x509certificate_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_sslstatus_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_secure_connection: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslstatus_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_cert_status: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslstatus_t) -> cef_cert_status_t::Type,
    >,
    #[doc = ""]
    pub get_sslversion: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_version_t::Type,
    >,
    #[doc = ""]
    pub get_content_status: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_content_status_t::Type,
    >,
    #[doc = ""]
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslstatus_t) -> *mut _cef_x509certificate_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_sslstatus_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_sslstatus_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_sslstatus_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_sslstatus_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_sslstatus_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_sslstatus_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslstatus_t>())).is_secure_connection as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(is_secure_connection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslstatus_t>())).get_cert_status as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(get_cert_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_sslstatus_t>())).get_sslversion as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(get_sslversion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslstatus_t>())).get_content_status as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(get_content_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslstatus_t>())).get_x509certificate as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslstatus_t),
            "::",
            stringify!(get_x509certificate)
        )
    );
}
#[doc = ""]
pub type cef_sslstatus_t = _cef_sslstatus_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_navigation_entry_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_display_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_original_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_title: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_transition_type: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_navigation_entry_t,
        ) -> cef_transition_type_t::Type,
    >,
    #[doc = ""]
    pub has_post_data: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_completion_time: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> cef_time_t,
    >,
    #[doc = ""]
    pub get_http_status_code: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_sslstatus: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_navigation_entry_t) -> *mut _cef_sslstatus_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_navigation_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_navigation_entry_t>(),
        60usize,
        concat!("Size of: ", stringify!(_cef_navigation_entry_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_navigation_entry_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_navigation_entry_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_navigation_entry_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).is_valid as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_url as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_display_url as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_display_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_original_url as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_original_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_title as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_title)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_transition_type as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_transition_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).has_post_data as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(has_post_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_completion_time as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_completion_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_http_status_code as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_http_status_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_t>())).get_sslstatus as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_t),
            "::",
            stringify!(get_sslstatus)
        )
    );
}
#[doc = ""]
pub type cef_navigation_entry_t = _cef_navigation_entry_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_registration_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
}
#[test]
fn bindgen_test_layout__cef_registration_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_registration_t>(),
        20usize,
        concat!("Size of: ", stringify!(_cef_registration_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_registration_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_registration_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_registration_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_registration_t),
            "::",
            stringify!(base)
        )
    );
}
#[doc = ""]
pub type cef_registration_t = _cef_registration_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub cont: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_callback_t)>,
    #[doc = ""]
    pub cancel: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_callback_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_callback_t>())).cont as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_callback_t>())).cancel as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[doc = ""]
pub type cef_callback_t = _cef_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_completion_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_complete:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_completion_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_completion_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_completion_callback_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_completion_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_completion_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_completion_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_completion_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_completion_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_completion_callback_t>())).on_complete as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_completion_callback_t),
            "::",
            stringify!(on_complete)
        )
    );
}
#[doc = ""]
pub type cef_completion_callback_t = _cef_completion_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_cookie_manager_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub set_supported_schemes: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_manager_t,
            schemes: cef_string_list_t,
            include_defaults: ::std::os::raw::c_int,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    #[doc = ""]
    pub visit_all_cookies: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_manager_t,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub visit_url_cookies: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            includeHttpOnly: ::std::os::raw::c_int,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_cookie: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie: *const _cef_cookie_t,
            callback: *mut _cef_set_cookie_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub delete_cookies: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie_name: *const cef_string_t,
            callback: *mut _cef_delete_cookies_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub flush_store: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_manager_t,
            callback: *mut _cef_completion_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_cookie_manager_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cookie_manager_t>(),
        44usize,
        concat!("Size of: ", stringify!(_cef_cookie_manager_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cookie_manager_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_cookie_manager_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_manager_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).set_supported_schemes as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(set_supported_schemes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).visit_all_cookies as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(visit_all_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).visit_url_cookies as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(visit_url_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).set_cookie as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(set_cookie)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).delete_cookies as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(delete_cookies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_manager_t>())).flush_store as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_manager_t),
            "::",
            stringify!(flush_store)
        )
    );
}
#[doc = ""]
pub type cef_cookie_manager_t = _cef_cookie_manager_t;
extern "C" {
    #[doc = ""]
    pub fn cef_cookie_manager_get_global_manager(
        callback: *mut _cef_completion_callback_t,
    ) -> *mut cef_cookie_manager_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_cookie_visitor_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub visit: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_visitor_t,
            cookie: *const _cef_cookie_t,
            count: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
            deleteCookie: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_cookie_visitor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cookie_visitor_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_cookie_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cookie_visitor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_cookie_visitor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_visitor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_visitor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_cookie_visitor_t>())).visit as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_visitor_t),
            "::",
            stringify!(visit)
        )
    );
}
#[doc = ""]
pub type cef_cookie_visitor_t = _cef_cookie_visitor_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_set_cookie_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_complete: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_set_cookie_callback_t,
            success: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_set_cookie_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_set_cookie_callback_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_set_cookie_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_set_cookie_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_set_cookie_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_set_cookie_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_set_cookie_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_set_cookie_callback_t>())).on_complete as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_set_cookie_callback_t),
            "::",
            stringify!(on_complete)
        )
    );
}
#[doc = ""]
pub type cef_set_cookie_callback_t = _cef_set_cookie_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_delete_cookies_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_complete: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_delete_cookies_callback_t,
            num_deleted: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_delete_cookies_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_delete_cookies_callback_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_delete_cookies_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_delete_cookies_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_delete_cookies_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_delete_cookies_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_delete_cookies_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_delete_cookies_callback_t>())).on_complete as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_delete_cookies_callback_t),
            "::",
            stringify!(on_complete)
        )
    );
}
#[doc = ""]
pub type cef_delete_cookies_callback_t = _cef_delete_cookies_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_extension_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_identifier: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_path: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_manifest: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_extension_t) -> *mut _cef_dictionary_value_t,
    >,
    #[doc = ""]
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_t,
            that: *mut _cef_extension_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_extension_t) -> *mut _cef_extension_handler_t,
    >,
    #[doc = ""]
    pub get_loader_context: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_extension_t) -> *mut _cef_request_context_t,
    >,
    #[doc = ""]
    pub is_loaded: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_extension_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub unload: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_extension_t)>,
}
#[test]
fn bindgen_test_layout__cef_extension_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_extension_t>(),
        52usize,
        concat!("Size of: ", stringify!(_cef_extension_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_extension_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_extension_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).get_identifier as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).get_path as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).get_manifest as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_manifest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).is_same as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).get_handler as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_t>())).get_loader_context as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(get_loader_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).is_loaded as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(is_loaded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_t>())).unload as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_t),
            "::",
            stringify!(unload)
        )
    );
}
#[doc = ""]
pub type cef_extension_t = _cef_extension_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_get_extension_resource_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_get_extension_resource_callback_t,
            stream: *mut _cef_stream_reader_t,
        ),
    >,
    #[doc = ""]
    pub cancel: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_get_extension_resource_callback_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_get_extension_resource_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_get_extension_resource_callback_t>(),
        28usize,
        concat!(
            "Size of: ",
            stringify!(_cef_get_extension_resource_callback_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_get_extension_resource_callback_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_get_extension_resource_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_get_extension_resource_callback_t>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_get_extension_resource_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_get_extension_resource_callback_t>())).cont as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_get_extension_resource_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_get_extension_resource_callback_t>())).cancel as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_get_extension_resource_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[doc = ""]
pub type cef_get_extension_resource_callback_t = _cef_get_extension_resource_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_extension_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_extension_load_failed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            result: cef_errorcode_t::Type,
        ),
    >,
    #[doc = ""]
    pub on_extension_loaded: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
        ),
    >,
    #[doc = ""]
    pub on_extension_unloaded: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
        ),
    >,
    #[doc = ""]
    pub on_before_background_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            url: *const cef_string_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_before_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            active_browser: *mut _cef_browser_t,
            index: ::std::os::raw::c_int,
            url: *const cef_string_t,
            active: ::std::os::raw::c_int,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_active_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
        ) -> *mut _cef_browser_t,
    >,
    #[doc = ""]
    pub can_access_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
            target_browser: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_extension_resource: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            file: *const cef_string_t,
            callback: *mut _cef_get_extension_resource_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_extension_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_extension_handler_t>(),
        52usize,
        concat!("Size of: ", stringify!(_cef_extension_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_extension_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_extension_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_extension_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_extension_load_failed
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_extension_load_failed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_extension_loaded as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_extension_loaded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_extension_unloaded as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_extension_unloaded)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_before_background_browser
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_before_background_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).on_before_browser as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(on_before_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).get_active_browser as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(get_active_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).can_access_browser as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(can_access_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_extension_handler_t>())).get_extension_resource as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_extension_handler_t),
            "::",
            stringify!(get_extension_resource)
        )
    );
}
#[doc = ""]
pub type cef_extension_handler_t = _cef_extension_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_media_router_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub add_observer: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_media_router_t,
            observer: *mut _cef_media_observer_t,
        ) -> *mut _cef_registration_t,
    >,
    #[doc = ""]
    pub get_source: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_media_router_t,
            urn: *const cef_string_t,
        ) -> *mut _cef_media_source_t,
    >,
    #[doc = ""]
    pub notify_current_sinks:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_media_router_t)>,
    #[doc = ""]
    pub create_route: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_media_router_t,
            source: *mut _cef_media_source_t,
            sink: *mut _cef_media_sink_t,
            callback: *mut _cef_media_route_create_callback_t,
        ),
    >,
    #[doc = ""]
    pub notify_current_routes:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_media_router_t)>,
}
#[test]
fn bindgen_test_layout__cef_media_router_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_media_router_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_media_router_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_media_router_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_media_router_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_router_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_router_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_router_t>())).add_observer as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_router_t),
            "::",
            stringify!(add_observer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_router_t>())).get_source as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_router_t),
            "::",
            stringify!(get_source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_router_t>())).notify_current_sinks as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_router_t),
            "::",
            stringify!(notify_current_sinks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_router_t>())).create_route as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_router_t),
            "::",
            stringify!(create_route)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_router_t>())).notify_current_routes as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_router_t),
            "::",
            stringify!(notify_current_routes)
        )
    );
}
#[doc = ""]
pub type cef_media_router_t = _cef_media_router_t;
extern "C" {
    #[doc = ""]
    pub fn cef_media_router_get_global() -> *mut cef_media_router_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_media_observer_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_sinks: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_media_observer_t,
            sinksCount: usize,
            sinks: *const *mut _cef_media_sink_t,
        ),
    >,
    #[doc = ""]
    pub on_routes: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_media_observer_t,
            routesCount: usize,
            routes: *const *mut _cef_media_route_t,
        ),
    >,
    #[doc = ""]
    pub on_route_state_changed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_media_observer_t,
            route: *mut _cef_media_route_t,
            state: cef_media_route_connection_state_t::Type,
        ),
    >,
    #[doc = ""]
    pub on_route_message_received: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_media_observer_t,
            route: *mut _cef_media_route_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_media_observer_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_media_observer_t>(),
        36usize,
        concat!("Size of: ", stringify!(_cef_media_observer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_media_observer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_media_observer_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_observer_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_observer_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_observer_t>())).on_sinks as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_observer_t),
            "::",
            stringify!(on_sinks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_observer_t>())).on_routes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_observer_t),
            "::",
            stringify!(on_routes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_observer_t>())).on_route_state_changed as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_observer_t),
            "::",
            stringify!(on_route_state_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_observer_t>())).on_route_message_received as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_observer_t),
            "::",
            stringify!(on_route_message_received)
        )
    );
}
#[doc = ""]
pub type cef_media_observer_t = _cef_media_observer_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_media_route_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_id: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_media_route_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_source: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_media_route_t) -> *mut _cef_media_source_t,
    >,
    #[doc = ""]
    pub get_sink: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_media_route_t) -> *mut _cef_media_sink_t,
    >,
    #[doc = ""]
    pub send_route_message: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_media_route_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ),
    >,
    #[doc = ""]
    pub terminate:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_media_route_t)>,
}
#[test]
fn bindgen_test_layout__cef_media_route_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_media_route_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_media_route_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_media_route_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_media_route_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_route_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_route_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_route_t>())).get_id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_route_t),
            "::",
            stringify!(get_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_route_t>())).get_source as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_route_t),
            "::",
            stringify!(get_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_route_t>())).get_sink as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_route_t),
            "::",
            stringify!(get_sink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_route_t>())).send_route_message as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_route_t),
            "::",
            stringify!(send_route_message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_route_t>())).terminate as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_route_t),
            "::",
            stringify!(terminate)
        )
    );
}
#[doc = ""]
pub type cef_media_route_t = _cef_media_route_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_media_route_create_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_media_route_create_finished: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_media_route_create_callback_t,
            result: cef_media_route_create_result_t::Type,
            error: *const cef_string_t,
            route: *mut _cef_media_route_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_media_route_create_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_media_route_create_callback_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_media_route_create_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_media_route_create_callback_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_media_route_create_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_route_create_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_route_create_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_route_create_callback_t>()))
                .on_media_route_create_finished as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_route_create_callback_t),
            "::",
            stringify!(on_media_route_create_finished)
        )
    );
}
#[doc = ""]
pub type cef_media_route_create_callback_t = _cef_media_route_create_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_media_sink_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_id: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_description: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_icon_type: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_media_sink_t,
        ) -> cef_media_sink_icon_type_t::Type,
    >,
    #[doc = ""]
    pub get_device_info: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_media_sink_t,
            callback: *mut _cef_media_sink_device_info_callback_t,
        ),
    >,
    #[doc = ""]
    pub is_cast_sink: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_media_sink_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_dial_sink: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_media_sink_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_compatible_with: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_media_sink_t,
            source: *mut _cef_media_source_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_media_sink_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_media_sink_t>(),
        52usize,
        concat!("Size of: ", stringify!(_cef_media_sink_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_media_sink_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_media_sink_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_sink_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_sink_t>())).get_id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_t),
            "::",
            stringify!(get_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_sink_t>())).get_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_t),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_sink_t>())).get_description as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_t),
            "::",
            stringify!(get_description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_sink_t>())).get_icon_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_t),
            "::",
            stringify!(get_icon_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_sink_t>())).get_device_info as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_t),
            "::",
            stringify!(get_device_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_sink_t>())).is_cast_sink as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_t),
            "::",
            stringify!(is_cast_sink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_sink_t>())).is_dial_sink as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_t),
            "::",
            stringify!(is_dial_sink)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_sink_t>())).is_compatible_with as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_t),
            "::",
            stringify!(is_compatible_with)
        )
    );
}
#[doc = ""]
pub type cef_media_sink_t = _cef_media_sink_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_media_sink_device_info_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_media_sink_device_info: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_media_sink_device_info_callback_t,
            device_info: *const _cef_media_sink_device_info_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_media_sink_device_info_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_media_sink_device_info_callback_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_cef_media_sink_device_info_callback_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_media_sink_device_info_callback_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_media_sink_device_info_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_sink_device_info_callback_t>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_device_info_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_sink_device_info_callback_t>()))
                .on_media_sink_device_info as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_sink_device_info_callback_t),
            "::",
            stringify!(on_media_sink_device_info)
        )
    );
}
#[doc = ""]
pub type cef_media_sink_device_info_callback_t = _cef_media_sink_device_info_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_media_source_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_id: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_media_source_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub is_cast_source: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_media_source_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_dial_source: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_media_source_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_media_source_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_media_source_t>(),
        32usize,
        concat!("Size of: ", stringify!(_cef_media_source_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_media_source_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_media_source_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_source_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_source_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_media_source_t>())).get_id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_source_t),
            "::",
            stringify!(get_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_source_t>())).is_cast_source as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_source_t),
            "::",
            stringify!(is_cast_source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_media_source_t>())).is_dial_source as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_media_source_t),
            "::",
            stringify!(is_dial_source)
        )
    );
}
#[doc = ""]
pub type cef_media_source_t = _cef_media_source_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_context_handler_t {
    _unused: [u8; 0],
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_resolve_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_resolve_completed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resolve_callback_t,
            result: cef_errorcode_t::Type,
            resolved_ips: cef_string_list_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_resolve_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resolve_callback_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_resolve_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resolve_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_resolve_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resolve_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resolve_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resolve_callback_t>())).on_resolve_completed as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resolve_callback_t),
            "::",
            stringify!(on_resolve_completed)
        )
    );
}
#[doc = ""]
pub type cef_resolve_callback_t = _cef_resolve_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_request_context_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_sharing_with: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_global: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
        ) -> *mut _cef_request_context_handler_t,
    >,
    #[doc = ""]
    pub get_cache_path: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_context_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_cookie_manager: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ) -> *mut _cef_cookie_manager_t,
    >,
    #[doc = ""]
    pub register_scheme_handler_factory: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            scheme_name: *const cef_string_t,
            domain_name: *const cef_string_t,
            factory: *mut _cef_scheme_handler_factory_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub clear_scheme_handler_factories: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub purge_plugin_list_cache: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            reload_pages: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub has_preference: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_preference: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> *mut _cef_value_t,
    >,
    #[doc = ""]
    pub get_all_preferences: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            include_defaults: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    #[doc = ""]
    pub can_set_preference: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_preference: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
            value: *mut _cef_value_t,
            error: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub clear_certificate_exceptions: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    #[doc = ""]
    pub clear_http_auth_credentials: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    #[doc = ""]
    pub close_all_connections: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    #[doc = ""]
    pub resolve_host: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            origin: *const cef_string_t,
            callback: *mut _cef_resolve_callback_t,
        ),
    >,
    #[doc = ""]
    pub load_extension: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            root_directory: *const cef_string_t,
            manifest: *mut _cef_dictionary_value_t,
            handler: *mut _cef_extension_handler_t,
        ),
    >,
    #[doc = ""]
    pub did_load_extension: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub has_extension: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_extensions: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            extension_ids: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_extension: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> *mut _cef_extension_t,
    >,
    #[doc = ""]
    pub get_media_router: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_request_context_t) -> *mut _cef_media_router_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_request_context_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_context_t>(),
        116usize,
        concat!("Size of: ", stringify!(_cef_request_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_context_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_request_context_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_context_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_context_t>())).is_same as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).is_sharing_with as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(is_sharing_with)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).is_global as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(is_global)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_handler as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_cache_path as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_cache_path)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_cookie_manager as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_cookie_manager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).register_scheme_handler_factory
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(register_scheme_handler_factory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).clear_scheme_handler_factories
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(clear_scheme_handler_factories)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).purge_plugin_list_cache as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(purge_plugin_list_cache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).has_preference as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(has_preference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_preference as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_preference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_all_preferences as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_all_preferences)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).can_set_preference as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(can_set_preference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).set_preference as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(set_preference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).clear_certificate_exceptions
                as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(clear_certificate_exceptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).clear_http_auth_credentials
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(clear_http_auth_credentials)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).close_all_connections as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(close_all_connections)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).resolve_host as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(resolve_host)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).load_extension as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(load_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).did_load_extension as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(did_load_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).has_extension as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(has_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_extensions as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_extensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_extension as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_context_t>())).get_media_router as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_context_t),
            "::",
            stringify!(get_media_router)
        )
    );
}
#[doc = ""]
pub type cef_request_context_t = _cef_request_context_t;
extern "C" {
    #[doc = ""]
    pub fn cef_request_context_get_global_context() -> *mut cef_request_context_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_request_context_create_context(
        settings: *const _cef_request_context_settings_t,
        handler: *mut _cef_request_context_handler_t,
    ) -> *mut cef_request_context_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_create_context_shared(
        other: *mut cef_request_context_t, handler: *mut _cef_request_context_handler_t,
    ) -> *mut cef_request_context_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_browser_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_host: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> *mut _cef_browser_host_t,
    >,
    #[doc = ""]
    pub can_go_back: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub go_back: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_t)>,
    #[doc = ""]
    pub can_go_forward: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub go_forward: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_t)>,
    #[doc = ""]
    pub is_loading: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub reload: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_t)>,
    #[doc = ""]
    pub reload_ignore_cache:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_t)>,
    #[doc = ""]
    pub stop_load: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_t)>,
    #[doc = ""]
    pub get_identifier: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_t,
            that: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_popup: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub has_document: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_main_frame: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t,
    >,
    #[doc = ""]
    pub get_focused_frame: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t,
    >,
    #[doc = ""]
    pub get_frame_byident: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_t,
            identifier: int64,
        ) -> *mut _cef_frame_t,
    >,
    #[doc = ""]
    pub get_frame: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_t,
            name: *const cef_string_t,
        ) -> *mut _cef_frame_t,
    >,
    #[doc = ""]
    pub get_frame_count:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_t) -> usize>,
    #[doc = ""]
    pub get_frame_identifiers: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_t,
            identifiersCount: *mut usize,
            identifiers: *mut int64,
        ),
    >,
    #[doc = ""]
    pub get_frame_names: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_t, names: cef_string_list_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_browser_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_browser_t>(),
        100usize,
        concat!("Size of: ", stringify!(_cef_browser_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_browser_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_browser_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_host as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).can_go_back as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(can_go_back)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).go_back as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(go_back)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).can_go_forward as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(can_go_forward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).go_forward as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(go_forward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).is_loading as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(is_loading)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).reload as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(reload)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_t>())).reload_ignore_cache as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(reload_ignore_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).stop_load as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(stop_load)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_identifier as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).is_same as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).is_popup as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(is_popup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).has_document as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(has_document)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_main_frame as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_main_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_t>())).get_focused_frame as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_focused_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_t>())).get_frame_byident as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame_byident)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_frame as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_frame_count as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_t>())).get_frame_identifiers as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame_identifiers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_t>())).get_frame_names as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_t),
            "::",
            stringify!(get_frame_names)
        )
    );
}
#[doc = ""]
pub type cef_browser_t = _cef_browser_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_run_file_dialog_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_file_dialog_dismissed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_run_file_dialog_callback_t,
            selected_accept_filter: ::std::os::raw::c_int,
            file_paths: cef_string_list_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_run_file_dialog_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_run_file_dialog_callback_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_run_file_dialog_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_run_file_dialog_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_run_file_dialog_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_file_dialog_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_file_dialog_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_file_dialog_callback_t>())).on_file_dialog_dismissed
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_file_dialog_callback_t),
            "::",
            stringify!(on_file_dialog_dismissed)
        )
    );
}
#[doc = ""]
pub type cef_run_file_dialog_callback_t = _cef_run_file_dialog_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_navigation_entry_visitor_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub visit: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_navigation_entry_visitor_t,
            entry: *mut _cef_navigation_entry_t,
            current: ::std::os::raw::c_int,
            index: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_navigation_entry_visitor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_navigation_entry_visitor_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_navigation_entry_visitor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_navigation_entry_visitor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_navigation_entry_visitor_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_visitor_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_visitor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_navigation_entry_visitor_t>())).visit as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_navigation_entry_visitor_t),
            "::",
            stringify!(visit)
        )
    );
}
#[doc = ""]
pub type cef_navigation_entry_visitor_t = _cef_navigation_entry_visitor_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_pdf_print_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_pdf_print_finished: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_pdf_print_callback_t,
            path: *const cef_string_t,
            ok: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_pdf_print_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_pdf_print_callback_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_pdf_print_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_pdf_print_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_pdf_print_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_pdf_print_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_pdf_print_callback_t>())).on_pdf_print_finished as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_pdf_print_callback_t),
            "::",
            stringify!(on_pdf_print_finished)
        )
    );
}
#[doc = ""]
pub type cef_pdf_print_callback_t = _cef_pdf_print_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_download_image_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_download_image_finished: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_download_image_callback_t,
            image_url: *const cef_string_t,
            http_status_code: ::std::os::raw::c_int,
            image: *mut _cef_image_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_download_image_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_download_image_callback_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_download_image_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_download_image_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_download_image_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_image_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_image_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_image_callback_t>())).on_download_image_finished
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_image_callback_t),
            "::",
            stringify!(on_download_image_finished)
        )
    );
}
#[doc = ""]
pub type cef_download_image_callback_t = _cef_download_image_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_browser_host_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_browser_t,
    >,
    #[doc = ""]
    pub close_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            force_close: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub try_close_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_focus: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, focus: ::std::os::raw::c_int),
    >,
    #[doc = ""]
    pub get_window_handle:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> HWND>,
    #[doc = ""]
    pub get_opener_window_handle:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> HWND>,
    #[doc = ""]
    pub has_view: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_client: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_client_t,
    >,
    #[doc = ""]
    pub get_request_context: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_request_context_t,
    >,
    #[doc = ""]
    pub get_zoom_level:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> f64>,
    #[doc = ""]
    pub set_zoom_level: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, zoomLevel: f64),
    >,
    #[doc = ""]
    pub run_file_dialog: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            mode: cef_file_dialog_mode_t::Type,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            selected_accept_filter: ::std::os::raw::c_int,
            callback: *mut _cef_run_file_dialog_callback_t,
        ),
    >,
    #[doc = ""]
    pub start_download: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, url: *const cef_string_t),
    >,
    #[doc = ""]
    pub download_image: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            image_url: *const cef_string_t,
            is_favicon: ::std::os::raw::c_int,
            max_image_size: uint32,
            bypass_cache: ::std::os::raw::c_int,
            callback: *mut _cef_download_image_callback_t,
        ),
    >,
    #[doc = ""]
    pub print: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = ""]
    pub print_to_pdf: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            path: *const cef_string_t,
            settings: *const _cef_pdf_print_settings_t,
            callback: *mut _cef_pdf_print_callback_t,
        ),
    >,
    #[doc = ""]
    pub find: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            identifier: ::std::os::raw::c_int,
            searchText: *const cef_string_t,
            forward: ::std::os::raw::c_int,
            matchCase: ::std::os::raw::c_int,
            findNext: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub stop_finding: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            clearSelection: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub show_dev_tools: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            windowInfo: *const _cef_window_info_t,
            client: *mut _cef_client_t,
            settings: *const _cef_browser_settings_t,
            inspect_element_at: *const cef_point_t,
        ),
    >,
    #[doc = ""]
    pub close_dev_tools:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = ""]
    pub has_dev_tools: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub send_dev_tools_message: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub execute_dev_tools_method: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            message_id: ::std::os::raw::c_int,
            method: *const cef_string_t,
            params: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub add_dev_tools_message_observer: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            observer: *mut _cef_dev_tools_message_observer_t,
        ) -> *mut _cef_registration_t,
    >,
    #[doc = ""]
    pub get_navigation_entries: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            visitor: *mut _cef_navigation_entry_visitor_t,
            current_only: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub replace_misspelling: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t),
    >,
    #[doc = ""]
    pub add_word_to_dictionary: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t),
    >,
    #[doc = ""]
    pub is_window_rendering_disabled: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub was_resized:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = ""]
    pub was_hidden: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, hidden: ::std::os::raw::c_int),
    >,
    #[doc = ""]
    pub notify_screen_info_changed:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = ""]
    pub invalidate: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            type_: cef_paint_element_type_t::Type,
        ),
    >,
    #[doc = ""]
    pub send_external_begin_frame:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = ""]
    pub send_key_event: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, event: *const _cef_key_event_t),
    >,
    #[doc = ""]
    pub send_mouse_click_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            type_: cef_mouse_button_type_t::Type,
            mouseUp: ::std::os::raw::c_int,
            clickCount: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub send_mouse_move_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            mouseLeave: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub send_mouse_wheel_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            deltaX: ::std::os::raw::c_int,
            deltaY: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub send_touch_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_touch_event_t,
        ),
    >,
    #[doc = ""]
    pub send_focus_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            setFocus: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub send_capture_lost_event:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = ""]
    pub notify_move_or_resize_started:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = ""]
    pub get_windowless_frame_rate: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_windowless_frame_rate: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            frame_rate: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub ime_set_composition: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            underlinesCount: usize,
            underlines: *const cef_composition_underline_t,
            replacement_range: *const cef_range_t,
            selection_range: *const cef_range_t,
        ),
    >,
    #[doc = ""]
    pub ime_commit_text: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            replacement_range: *const cef_range_t,
            relative_cursor_pos: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub ime_finish_composing_text: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            keep_selection: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub ime_cancel_composition:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = ""]
    pub drag_target_drag_enter: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            drag_data: *mut _cef_drag_data_t,
            event: *const _cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t,
        ),
    >,
    #[doc = ""]
    pub drag_target_drag_over: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t,
        ),
    >,
    #[doc = ""]
    pub drag_target_drag_leave:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = ""]
    pub drag_target_drop: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
        ),
    >,
    #[doc = ""]
    pub drag_source_ended_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            op: cef_drag_operations_mask_t,
        ),
    >,
    #[doc = ""]
    pub drag_source_system_drag_ended:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t)>,
    #[doc = ""]
    pub get_visible_navigation_entry: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_navigation_entry_t,
    >,
    #[doc = ""]
    pub set_accessibility_state: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            accessibility_state: cef_state_t::Type,
        ),
    >,
    #[doc = ""]
    pub set_auto_resize_enabled: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_host_t,
            enabled: ::std::os::raw::c_int,
            min_size: *const cef_size_t,
            max_size: *const cef_size_t,
        ),
    >,
    #[doc = ""]
    pub get_extension: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_extension_t,
    >,
    #[doc = ""]
    pub is_background_host: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_audio_muted: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t, mute: ::std::os::raw::c_int),
    >,
    #[doc = ""]
    pub is_audio_muted: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_browser_host_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_browser_host_t>(),
        260usize,
        concat!("Size of: ", stringify!(_cef_browser_host_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_browser_host_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_browser_host_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).get_browser as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).close_browser as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(close_browser)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).try_close_browser as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(try_close_browser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).set_focus as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_focus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_window_handle as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_window_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_opener_window_handle as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_opener_window_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).has_view as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(has_view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).get_client as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_client)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_request_context as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_request_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_zoom_level as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_zoom_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_zoom_level as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_zoom_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).run_file_dialog as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(run_file_dialog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).start_download as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(start_download)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).download_image as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(download_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).print as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(print)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).print_to_pdf as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(print_to_pdf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).find as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(find)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).stop_finding as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(stop_finding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).show_dev_tools as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(show_dev_tools)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).close_dev_tools as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(close_dev_tools)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).has_dev_tools as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(has_dev_tools)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_dev_tools_message as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_dev_tools_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).execute_dev_tools_method as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(execute_dev_tools_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).add_dev_tools_message_observer
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(add_dev_tools_message_observer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_navigation_entries as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_navigation_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).replace_misspelling as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(replace_misspelling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).add_word_to_dictionary as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(add_word_to_dictionary)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).is_window_rendering_disabled as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(is_window_rendering_disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).was_resized as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(was_resized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).was_hidden as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(was_hidden)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).notify_screen_info_changed as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(notify_screen_info_changed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_browser_host_t>())).invalidate as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(invalidate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_external_begin_frame as *const _
                as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_external_begin_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_key_event as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_key_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_mouse_click_event as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_mouse_click_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_mouse_move_event as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_mouse_move_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_mouse_wheel_event as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_mouse_wheel_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_touch_event as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_touch_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_focus_event as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_focus_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).send_capture_lost_event as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(send_capture_lost_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).notify_move_or_resize_started
                as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(notify_move_or_resize_started)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_windowless_frame_rate as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_windowless_frame_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_windowless_frame_rate as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_windowless_frame_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).ime_set_composition as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(ime_set_composition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).ime_commit_text as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(ime_commit_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).ime_finish_composing_text as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(ime_finish_composing_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).ime_cancel_composition as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(ime_cancel_composition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_target_drag_enter as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_target_drag_enter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_target_drag_over as *const _
                as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_target_drag_over)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_target_drag_leave as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_target_drag_leave)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_target_drop as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_target_drop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_source_ended_at as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_source_ended_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).drag_source_system_drag_ended
                as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(drag_source_system_drag_ended)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_visible_navigation_entry as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_visible_navigation_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_accessibility_state as *const _
                as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_accessibility_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_auto_resize_enabled as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_auto_resize_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).get_extension as *const _ as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(get_extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).is_background_host as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(is_background_host)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).set_audio_muted as *const _ as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(set_audio_muted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_host_t>())).is_audio_muted as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_host_t),
            "::",
            stringify!(is_audio_muted)
        )
    );
}
#[doc = ""]
pub type cef_browser_host_t = _cef_browser_host_t;
extern "C" {
    #[doc = ""]
    pub fn cef_browser_host_create_browser(
        windowInfo: *const cef_window_info_t, client: *mut _cef_client_t, url: *const cef_string_t,
        settings: *const _cef_browser_settings_t, extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_browser_host_create_browser_sync(
        windowInfo: *const cef_window_info_t, client: *mut _cef_client_t, url: *const cef_string_t,
        settings: *const _cef_browser_settings_t, extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t,
    ) -> *mut cef_browser_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_audio_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_audio_parameters: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            params: *mut cef_audio_parameters_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_audio_stream_started: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            params: *const cef_audio_parameters_t,
            channels: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub on_audio_stream_packet: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            data: *mut *const f32,
            frames: ::std::os::raw::c_int,
            pts: int64,
        ),
    >,
    #[doc = ""]
    pub on_audio_stream_stopped: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_audio_handler_t, browser: *mut _cef_browser_t),
    >,
    #[doc = ""]
    pub on_audio_stream_error: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            message: *const cef_string_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_audio_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_audio_handler_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_audio_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_audio_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_audio_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_audio_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_audio_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_audio_handler_t>())).get_audio_parameters as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_audio_handler_t),
            "::",
            stringify!(get_audio_parameters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_audio_handler_t>())).on_audio_stream_started as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_audio_handler_t),
            "::",
            stringify!(on_audio_stream_started)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_audio_handler_t>())).on_audio_stream_packet as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_audio_handler_t),
            "::",
            stringify!(on_audio_stream_packet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_audio_handler_t>())).on_audio_stream_stopped as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_audio_handler_t),
            "::",
            stringify!(on_audio_stream_stopped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_audio_handler_t>())).on_audio_stream_error as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_audio_handler_t),
            "::",
            stringify!(on_audio_stream_error)
        )
    );
}
#[doc = ""]
pub type cef_audio_handler_t = _cef_audio_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_menu_model_delegate_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub execute_command: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t::Type,
        ),
    >,
    #[doc = ""]
    pub mouse_outside_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            screen_point: *const cef_point_t,
        ),
    >,
    #[doc = ""]
    pub unhandled_open_submenu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            is_rtl: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub unhandled_close_submenu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            is_rtl: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub menu_will_show: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
        ),
    >,
    #[doc = ""]
    pub menu_closed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
        ),
    >,
    #[doc = ""]
    pub format_label: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            label: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_menu_model_delegate_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_menu_model_delegate_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_menu_model_delegate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_menu_model_delegate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_menu_model_delegate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_delegate_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_delegate_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_delegate_t>())).execute_command as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_delegate_t),
            "::",
            stringify!(execute_command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_delegate_t>())).mouse_outside_menu as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_delegate_t),
            "::",
            stringify!(mouse_outside_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_delegate_t>())).unhandled_open_submenu
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_delegate_t),
            "::",
            stringify!(unhandled_open_submenu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_delegate_t>())).unhandled_close_submenu
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_delegate_t),
            "::",
            stringify!(unhandled_close_submenu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_delegate_t>())).menu_will_show as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_delegate_t),
            "::",
            stringify!(menu_will_show)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_delegate_t>())).menu_closed as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_delegate_t),
            "::",
            stringify!(menu_closed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_delegate_t>())).format_label as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_delegate_t),
            "::",
            stringify!(format_label)
        )
    );
}
#[doc = ""]
pub type cef_menu_model_delegate_t = _cef_menu_model_delegate_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_menu_model_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_sub_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub clear: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_count: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub add_separator: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub add_item: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub add_check_item: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub add_radio_item: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub add_sub_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> *mut _cef_menu_model_t,
    >,
    #[doc = ""]
    pub insert_separator_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub insert_item_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub insert_check_item_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub insert_radio_item_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub insert_sub_menu_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> *mut _cef_menu_model_t,
    >,
    #[doc = ""]
    pub remove: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub remove_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_index_of: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_command_id_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_command_id_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_label: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_label_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub set_label: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_label_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_type: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> cef_menu_item_type_t::Type,
    >,
    #[doc = ""]
    pub get_type_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> cef_menu_item_type_t::Type,
    >,
    #[doc = ""]
    pub get_group_id: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_group_id_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_group_id: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_group_id_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_sub_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> *mut _cef_menu_model_t,
    >,
    #[doc = ""]
    pub get_sub_menu_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_menu_model_t,
    >,
    #[doc = ""]
    pub is_visible: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_visible_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_visible: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            visible: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_visible_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            visible: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_enabled: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_enabled_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_enabled: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            enabled: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_enabled_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            enabled: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_checked: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_checked_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_checked: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            checked: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_checked_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            checked: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub has_accelerator: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub has_accelerator_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_accelerator: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_accelerator_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub remove_accelerator: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub remove_accelerator_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_accelerator: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_accelerator_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_color: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t::Type,
            color: cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_color_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t::Type,
            color: cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_color: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t::Type,
            color: *mut cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_color_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t::Type,
            color: *mut cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_font_list: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            font_list: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_font_list_at: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            font_list: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_menu_model_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_menu_model_t>(),
        244usize,
        concat!("Size of: ", stringify!(_cef_menu_model_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_menu_model_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_menu_model_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_sub_menu as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_sub_menu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).clear as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_count as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).add_separator as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_separator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).add_item as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).add_check_item as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_check_item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).add_radio_item as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_radio_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).add_sub_menu as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(add_sub_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_separator_at as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_separator_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_item_at as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_item_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_check_item_at as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_check_item_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_radio_item_at as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_radio_item_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).insert_sub_menu_at as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(insert_sub_menu_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).remove as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).remove_at as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(remove_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_index_of as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_index_of)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_command_id_at as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_command_id_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_command_id_at as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_command_id_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_label as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_label_at as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_label_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_label as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_label_at as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_label_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_type as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_type_at as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_type_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_group_id as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_group_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_group_id_at as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_group_id_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_group_id as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_group_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_group_id_at as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_group_id_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_sub_menu as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_sub_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_sub_menu_at as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_sub_menu_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_visible as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_visible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_visible_at as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_visible_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_visible as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_visible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_visible_at as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_visible_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_enabled as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_enabled_at as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_enabled_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_enabled as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_enabled_at as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_enabled_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_checked as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_checked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).is_checked_at as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(is_checked_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_checked as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_checked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_checked_at as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_checked_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).has_accelerator as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(has_accelerator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).has_accelerator_at as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(has_accelerator_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_accelerator as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_accelerator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_accelerator_at as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_accelerator_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).remove_accelerator as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(remove_accelerator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).remove_accelerator_at as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(remove_accelerator_at)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_accelerator as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_accelerator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).get_accelerator_at as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_accelerator_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_color as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_color_at as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_color_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_color as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).get_color_at as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(get_color_at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_menu_model_t>())).set_font_list as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_font_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_menu_model_t>())).set_font_list_at as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_menu_model_t),
            "::",
            stringify!(set_font_list_at)
        )
    );
}
#[doc = ""]
pub type cef_menu_model_t = _cef_menu_model_t;
extern "C" {
    #[doc = ""]
    pub fn cef_menu_model_create(
        delegate: *mut _cef_menu_model_delegate_t,
    ) -> *mut cef_menu_model_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_run_context_menu_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_run_context_menu_callback_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t::Type,
        ),
    >,
    #[doc = ""]
    pub cancel: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_run_context_menu_callback_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_run_context_menu_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_run_context_menu_callback_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_run_context_menu_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_run_context_menu_callback_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_run_context_menu_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_context_menu_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_context_menu_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_context_menu_callback_t>())).cont as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_context_menu_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_run_context_menu_callback_t>())).cancel as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_run_context_menu_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[doc = ""]
pub type cef_run_context_menu_callback_t = _cef_run_context_menu_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_context_menu_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_before_context_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t,
        ),
    >,
    #[doc = ""]
    pub run_context_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t,
            callback: *mut _cef_run_context_menu_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_context_menu_command: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_context_menu_dismissed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_context_menu_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_context_menu_handler_t>(),
        36usize,
        concat!("Size of: ", stringify!(_cef_context_menu_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_context_menu_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_context_menu_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).on_before_context_menu
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(on_before_context_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).run_context_menu as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(run_context_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).on_context_menu_command
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(on_context_menu_command)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_handler_t>())).on_context_menu_dismissed
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_handler_t),
            "::",
            stringify!(on_context_menu_dismissed)
        )
    );
}
#[doc = ""]
pub type cef_context_menu_handler_t = _cef_context_menu_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_context_menu_params_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_xcoord: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_ycoord: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_type_flags: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_type_flags_t::Type,
    >,
    #[doc = ""]
    pub get_link_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_unfiltered_link_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_source_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub has_image_contents: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_title_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_page_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_frame_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_frame_charset: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_media_type: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_media_type_t::Type,
    >,
    #[doc = ""]
    pub get_media_state_flags: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_media_state_flags_t::Type,
    >,
    #[doc = ""]
    pub get_selection_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_misspelled_word: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_dictionary_suggestions: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_params_t,
            suggestions: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_editable: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_spell_check_enabled: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_edit_state_flags: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_edit_state_flags_t::Type,
    >,
    #[doc = ""]
    pub is_custom_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_pepper_menu: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_context_menu_params_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_context_menu_params_t>(),
        104usize,
        concat!("Size of: ", stringify!(_cef_context_menu_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_context_menu_params_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_context_menu_params_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_context_menu_params_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_xcoord as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_xcoord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_ycoord as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_ycoord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_type_flags as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_type_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_link_url as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_link_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_unfiltered_link_url
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_unfiltered_link_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_source_url as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_source_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).has_image_contents as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(has_image_contents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_title_text as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_title_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_page_url as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_page_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_frame_url as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_frame_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_frame_charset as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_frame_charset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_media_type as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_media_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_media_state_flags as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_media_state_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_selection_text as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_selection_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_misspelled_word as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_misspelled_word)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_dictionary_suggestions
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_dictionary_suggestions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).is_editable as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(is_editable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).is_spell_check_enabled
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(is_spell_check_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).get_edit_state_flags as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(get_edit_state_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).is_custom_menu as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(is_custom_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_context_menu_params_t>())).is_pepper_menu as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_context_menu_params_t),
            "::",
            stringify!(is_pepper_menu)
        )
    );
}
#[doc = ""]
pub type cef_context_menu_params_t = _cef_context_menu_params_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_file_dialog_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_file_dialog_callback_t,
            selected_accept_filter: ::std::os::raw::c_int,
            file_paths: cef_string_list_t,
        ),
    >,
    #[doc = ""]
    pub cancel:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_file_dialog_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_file_dialog_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_file_dialog_callback_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_file_dialog_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_file_dialog_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_file_dialog_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_file_dialog_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_file_dialog_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_file_dialog_callback_t>())).cont as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_file_dialog_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_file_dialog_callback_t>())).cancel as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_file_dialog_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[doc = ""]
pub type cef_file_dialog_callback_t = _cef_file_dialog_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_dialog_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_file_dialog: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_dialog_handler_t,
            browser: *mut _cef_browser_t,
            mode: cef_file_dialog_mode_t::Type,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            selected_accept_filter: ::std::os::raw::c_int,
            callback: *mut _cef_file_dialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_dialog_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_dialog_handler_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_dialog_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_dialog_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_dialog_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_dialog_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dialog_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_dialog_handler_t>())).on_file_dialog as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_dialog_handler_t),
            "::",
            stringify!(on_file_dialog)
        )
    );
}
#[doc = ""]
pub type cef_dialog_handler_t = _cef_dialog_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_display_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_address_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            url: *const cef_string_t,
        ),
    >,
    #[doc = ""]
    pub on_title_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            title: *const cef_string_t,
        ),
    >,
    #[doc = ""]
    pub on_favicon_urlchange: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            icon_urls: cef_string_list_t,
        ),
    >,
    #[doc = ""]
    pub on_fullscreen_mode_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            fullscreen: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub on_tooltip: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            text: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_status_message: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            value: *const cef_string_t,
        ),
    >,
    #[doc = ""]
    pub on_console_message: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            level: cef_log_severity_t::Type,
            message: *const cef_string_t,
            source: *const cef_string_t,
            line: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_auto_resize: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            new_size: *const cef_size_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_loading_progress_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            progress: f64,
        ),
    >,
    #[doc = ""]
    pub on_cursor_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            cursor: HCURSOR,
            type_: cef_cursor_type_t::Type,
            custom_cursor_info: *const _cef_cursor_info_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_display_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_display_handler_t>(),
        60usize,
        concat!("Size of: ", stringify!(_cef_display_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_display_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_display_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_display_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_address_change as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_address_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_title_change as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_title_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_favicon_urlchange as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_favicon_urlchange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_fullscreen_mode_change as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_fullscreen_mode_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_tooltip as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_tooltip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_status_message as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_status_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_console_message as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_console_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_auto_resize as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_auto_resize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_loading_progress_change
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_loading_progress_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_display_handler_t>())).on_cursor_change as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_display_handler_t),
            "::",
            stringify!(on_cursor_change)
        )
    );
}
#[doc = ""]
pub type cef_display_handler_t = _cef_display_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_download_item_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_in_progress: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_complete: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_canceled: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_current_speed: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> int64,
    >,
    #[doc = ""]
    pub get_percent_complete: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_total_bytes: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> int64,
    >,
    #[doc = ""]
    pub get_received_bytes: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> int64,
    >,
    #[doc = ""]
    pub get_start_time: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_time_t,
    >,
    #[doc = ""]
    pub get_end_time: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_time_t,
    >,
    #[doc = ""]
    pub get_full_path: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_id: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> uint32,
    >,
    #[doc = ""]
    pub get_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_original_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_suggested_file_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_content_disposition: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_mime_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_download_item_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_download_item_t>(),
        88usize,
        concat!("Size of: ", stringify!(_cef_download_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_download_item_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_download_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_item_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_item_t>())).is_valid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).is_in_progress as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(is_in_progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).is_complete as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(is_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).is_canceled as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(is_canceled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_current_speed as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_current_speed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_percent_complete as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_percent_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_total_bytes as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_total_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_received_bytes as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_received_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_start_time as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_start_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_end_time as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_end_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_full_path as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_full_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_item_t>())).get_id as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_item_t>())).get_url as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_original_url as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_original_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_suggested_file_name as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_suggested_file_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_content_disposition as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_content_disposition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_t>())).get_mime_type as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_t),
            "::",
            stringify!(get_mime_type)
        )
    );
}
#[doc = ""]
pub type cef_download_item_t = _cef_download_item_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_before_download_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_before_download_callback_t,
            download_path: *const cef_string_t,
            show_dialog: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_before_download_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_before_download_callback_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_before_download_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_before_download_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_before_download_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_before_download_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_before_download_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_before_download_callback_t>())).cont as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_before_download_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
#[doc = ""]
pub type cef_before_download_callback_t = _cef_before_download_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_download_item_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub cancel: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_callback_t),
    >,
    #[doc = ""]
    pub pause: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_callback_t),
    >,
    #[doc = ""]
    pub resume: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_download_item_callback_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_download_item_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_download_item_callback_t>(),
        32usize,
        concat!("Size of: ", stringify!(_cef_download_item_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_download_item_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_download_item_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_callback_t>())).cancel as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_callback_t),
            "::",
            stringify!(cancel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_callback_t>())).pause as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_callback_t),
            "::",
            stringify!(pause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_item_callback_t>())).resume as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_item_callback_t),
            "::",
            stringify!(resume)
        )
    );
}
#[doc = ""]
pub type cef_download_item_callback_t = _cef_download_item_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_download_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_before_download: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            suggested_name: *const cef_string_t,
            callback: *mut _cef_before_download_callback_t,
        ),
    >,
    #[doc = ""]
    pub on_download_updated: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            callback: *mut _cef_download_item_callback_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_download_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_download_handler_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_download_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_download_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_download_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_download_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_handler_t>())).on_before_download as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_handler_t),
            "::",
            stringify!(on_before_download)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_download_handler_t>())).on_download_updated as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_download_handler_t),
            "::",
            stringify!(on_download_updated)
        )
    );
}
#[doc = ""]
pub type cef_download_handler_t = _cef_download_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_drag_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_drag_enter: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            dragData: *mut _cef_drag_data_t,
            mask: cef_drag_operations_mask_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_draggable_regions_changed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            regionsCount: usize,
            regions: *const cef_draggable_region_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_drag_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_drag_handler_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_drag_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_drag_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_drag_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_drag_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_handler_t>())).on_drag_enter as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_handler_t),
            "::",
            stringify!(on_drag_enter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_drag_handler_t>())).on_draggable_regions_changed as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_drag_handler_t),
            "::",
            stringify!(on_draggable_regions_changed)
        )
    );
}
#[doc = ""]
pub type cef_drag_handler_t = _cef_drag_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_find_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_find_result: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_find_handler_t,
            browser: *mut _cef_browser_t,
            identifier: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            selectionRect: *const cef_rect_t,
            activeMatchOrdinal: ::std::os::raw::c_int,
            finalUpdate: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_find_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_find_handler_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_find_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_find_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_find_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_find_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_find_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_find_handler_t>())).on_find_result as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_find_handler_t),
            "::",
            stringify!(on_find_result)
        )
    );
}
#[doc = ""]
pub type cef_find_handler_t = _cef_find_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_focus_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_take_focus: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            next: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub on_set_focus: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            source: cef_focus_source_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_got_focus: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_focus_handler_t, browser: *mut _cef_browser_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_focus_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_focus_handler_t>(),
        32usize,
        concat!("Size of: ", stringify!(_cef_focus_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_focus_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_focus_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_focus_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_focus_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_focus_handler_t>())).on_take_focus as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_focus_handler_t),
            "::",
            stringify!(on_take_focus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_focus_handler_t>())).on_set_focus as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_focus_handler_t),
            "::",
            stringify!(on_set_focus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_focus_handler_t>())).on_got_focus as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_focus_handler_t),
            "::",
            stringify!(on_got_focus)
        )
    );
}
#[doc = ""]
pub type cef_focus_handler_t = _cef_focus_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_jsdialog_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_jsdialog_callback_t,
            success: ::std::os::raw::c_int,
            user_input: *const cef_string_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_jsdialog_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_jsdialog_callback_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_jsdialog_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_jsdialog_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_jsdialog_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_jsdialog_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_jsdialog_callback_t>())).cont as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
#[doc = ""]
pub type cef_jsdialog_callback_t = _cef_jsdialog_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_jsdialog_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_jsdialog: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            dialog_type: cef_jsdialog_type_t::Type,
            message_text: *const cef_string_t,
            default_prompt_text: *const cef_string_t,
            callback: *mut _cef_jsdialog_callback_t,
            suppress_message: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_before_unload_dialog: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            message_text: *const cef_string_t,
            is_reload: ::std::os::raw::c_int,
            callback: *mut _cef_jsdialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_reset_dialog_state: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    #[doc = ""]
    pub on_dialog_closed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_jsdialog_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_jsdialog_handler_t>(),
        36usize,
        concat!("Size of: ", stringify!(_cef_jsdialog_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_jsdialog_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_jsdialog_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).on_jsdialog as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(on_jsdialog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).on_before_unload_dialog as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(on_before_unload_dialog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).on_reset_dialog_state as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(on_reset_dialog_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_jsdialog_handler_t>())).on_dialog_closed as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_jsdialog_handler_t),
            "::",
            stringify!(on_dialog_closed)
        )
    );
}
#[doc = ""]
pub type cef_jsdialog_handler_t = _cef_jsdialog_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_keyboard_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_pre_key_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const _cef_key_event_t,
            os_event: *mut MSG,
            is_keyboard_shortcut: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_key_event: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const _cef_key_event_t,
            os_event: *mut MSG,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_keyboard_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_keyboard_handler_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_keyboard_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_keyboard_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_keyboard_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_keyboard_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_keyboard_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_keyboard_handler_t>())).on_pre_key_event as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_keyboard_handler_t),
            "::",
            stringify!(on_pre_key_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_keyboard_handler_t>())).on_key_event as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_keyboard_handler_t),
            "::",
            stringify!(on_key_event)
        )
    );
}
#[doc = ""]
pub type cef_keyboard_handler_t = _cef_keyboard_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_life_span_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_before_popup: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_frame_name: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t::Type,
            user_gesture: ::std::os::raw::c_int,
            popupFeatures: *const _cef_popup_features_t,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
            extra_info: *mut *mut _cef_dictionary_value_t,
            no_javascript_access: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_after_created: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    #[doc = ""]
    pub do_close: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_before_close: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_life_span_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_life_span_handler_t>(),
        36usize,
        concat!("Size of: ", stringify!(_cef_life_span_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_life_span_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_life_span_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_life_span_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_life_span_handler_t>())).on_before_popup as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(on_before_popup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_life_span_handler_t>())).on_after_created as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(on_after_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_life_span_handler_t>())).do_close as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(do_close)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_life_span_handler_t>())).on_before_close as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_life_span_handler_t),
            "::",
            stringify!(on_before_close)
        )
    );
}
#[doc = ""]
pub type cef_life_span_handler_t = _cef_life_span_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_load_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_loading_state_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            isLoading: ::std::os::raw::c_int,
            canGoBack: ::std::os::raw::c_int,
            canGoForward: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub on_load_start: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            transition_type: cef_transition_type_t::Type,
        ),
    >,
    #[doc = ""]
    pub on_load_end: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            httpStatusCode: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub on_load_error: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            errorCode: cef_errorcode_t::Type,
            errorText: *const cef_string_t,
            failedUrl: *const cef_string_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_load_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_load_handler_t>(),
        36usize,
        concat!("Size of: ", stringify!(_cef_load_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_load_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_load_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_load_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_load_handler_t>())).on_loading_state_change as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(on_loading_state_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_load_handler_t>())).on_load_start as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(on_load_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_load_handler_t>())).on_load_end as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(on_load_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_load_handler_t>())).on_load_error as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_load_handler_t),
            "::",
            stringify!(on_load_error)
        )
    );
}
#[doc = ""]
pub type cef_load_handler_t = _cef_load_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_accessibility_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_accessibility_tree_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_accessibility_handler_t,
            value: *mut _cef_value_t,
        ),
    >,
    #[doc = ""]
    pub on_accessibility_location_change: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_accessibility_handler_t,
            value: *mut _cef_value_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_accessibility_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_accessibility_handler_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_accessibility_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_accessibility_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_accessibility_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_accessibility_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_accessibility_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_accessibility_handler_t>())).on_accessibility_tree_change
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_accessibility_handler_t),
            "::",
            stringify!(on_accessibility_tree_change)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_accessibility_handler_t>()))
                .on_accessibility_location_change as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_accessibility_handler_t),
            "::",
            stringify!(on_accessibility_location_change)
        )
    );
}
#[doc = ""]
pub type cef_accessibility_handler_t = _cef_accessibility_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_render_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_accessibility_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
        ) -> *mut _cef_accessibility_handler_t,
    >,
    #[doc = ""]
    pub get_root_screen_rect: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_view_rect: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t,
        ),
    >,
    #[doc = ""]
    pub get_screen_point: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            viewX: ::std::os::raw::c_int,
            viewY: ::std::os::raw::c_int,
            screenX: *mut ::std::os::raw::c_int,
            screenY: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_screen_info: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            screen_info: *mut _cef_screen_info_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_popup_show: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            show: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub on_popup_size: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *const cef_rect_t,
        ),
    >,
    #[doc = ""]
    pub on_paint: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t::Type,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            buffer: *const ::std::os::raw::c_void,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub on_accelerated_paint: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t::Type,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            shared_handle: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = ""]
    pub start_dragging: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            drag_data: *mut _cef_drag_data_t,
            allowed_ops: cef_drag_operations_mask_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub update_drag_cursor: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            operation: cef_drag_operations_mask_t,
        ),
    >,
    #[doc = ""]
    pub on_scroll_offset_changed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            x: f64,
            y: f64,
        ),
    >,
    #[doc = ""]
    pub on_ime_composition_range_changed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_range: *const cef_range_t,
            character_boundsCount: usize,
            character_bounds: *const cef_rect_t,
        ),
    >,
    #[doc = ""]
    pub on_text_selection_changed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_text: *const cef_string_t,
            selected_range: *const cef_range_t,
        ),
    >,
    #[doc = ""]
    pub on_virtual_keyboard_requested: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            input_mode: cef_text_input_mode_t::Type,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_render_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_render_handler_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_render_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_render_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_render_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_render_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_accessibility_handler as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_accessibility_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_root_screen_rect as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_root_screen_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_view_rect as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_view_rect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_screen_point as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_screen_point)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).get_screen_info as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(get_screen_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_popup_show as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_popup_show)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_popup_size as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_popup_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_render_handler_t>())).on_paint as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_paint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_accelerated_paint as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_accelerated_paint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).start_dragging as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(start_dragging)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).update_drag_cursor as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(update_drag_cursor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_scroll_offset_changed as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_scroll_offset_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_ime_composition_range_changed
                as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_ime_composition_range_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_text_selection_changed as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_text_selection_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_handler_t>())).on_virtual_keyboard_requested
                as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_handler_t),
            "::",
            stringify!(on_virtual_keyboard_requested)
        )
    );
}
#[doc = ""]
pub type cef_render_handler_t = _cef_render_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_auth_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_auth_callback_t,
            username: *const cef_string_t,
            password: *const cef_string_t,
        ),
    >,
    #[doc = ""]
    pub cancel: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_auth_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_auth_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_auth_callback_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_auth_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_auth_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_auth_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_auth_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_auth_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_auth_callback_t>())).cont as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_auth_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_auth_callback_t>())).cancel as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_auth_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[doc = ""]
pub type cef_auth_callback_t = _cef_auth_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_request_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_callback_t,
            allow: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub cancel:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_request_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_request_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_callback_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_request_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_request_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_callback_t>())).cont as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_callback_t>())).cancel as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[doc = ""]
pub type cef_request_callback_t = _cef_request_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_response_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_error: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> cef_errorcode_t::Type,
    >,
    #[doc = ""]
    pub set_error: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, error: cef_errorcode_t::Type),
    >,
    #[doc = ""]
    pub get_status: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_status: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, status: ::std::os::raw::c_int),
    >,
    #[doc = ""]
    pub get_status_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub set_status_text: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, statusText: *const cef_string_t),
    >,
    #[doc = ""]
    pub get_mime_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub set_mime_type: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, mimeType: *const cef_string_t),
    >,
    #[doc = ""]
    pub get_charset: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub set_charset: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, charset: *const cef_string_t),
    >,
    #[doc = ""]
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_response_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_response_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub get_header_map: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t),
    >,
    #[doc = ""]
    pub set_header_map: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t),
    >,
    #[doc = ""]
    pub get_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub set_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_t, url: *const cef_string_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_response_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_response_t>(),
        88usize,
        concat!("Size of: ", stringify!(_cef_response_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_response_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_response_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).is_read_only as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_error as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_error as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_status as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_status as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_status_text as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_status_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_status_text as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_status_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_mime_type as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_mime_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_mime_type as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_mime_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_charset as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_charset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_charset as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_charset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_response_t>())).get_header_by_name as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_header_by_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_response_t>())).set_header_by_name as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_header_by_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_header_map as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_header_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_header_map as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_header_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).get_url as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(get_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_t>())).set_url as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_t),
            "::",
            stringify!(set_url)
        )
    );
}
#[doc = ""]
pub type cef_response_t = _cef_response_t;
extern "C" {
    #[doc = ""]
    pub fn cef_response_create() -> *mut cef_response_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_resource_skip_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_resource_skip_callback_t, bytes_skipped: int64),
    >,
}
#[test]
fn bindgen_test_layout__cef_resource_skip_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_skip_callback_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_resource_skip_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_skip_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_resource_skip_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_skip_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_skip_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_skip_callback_t>())).cont as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_skip_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
#[doc = ""]
pub type cef_resource_skip_callback_t = _cef_resource_skip_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_resource_read_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_read_callback_t,
            bytes_read: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_resource_read_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_read_callback_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_resource_read_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_read_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_resource_read_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_read_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_read_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_read_callback_t>())).cont as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_read_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
#[doc = ""]
pub type cef_resource_read_callback_t = _cef_resource_read_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_resource_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub open: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            handle_request: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub process_request: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_response_headers: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_handler_t,
            response: *mut _cef_response_t,
            response_length: *mut int64,
            redirectUrl: *mut cef_string_t,
        ),
    >,
    #[doc = ""]
    pub skip: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_handler_t,
            bytes_to_skip: int64,
            bytes_skipped: *mut int64,
            callback: *mut _cef_resource_skip_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub read: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_resource_read_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub read_response: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub cancel:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_resource_handler_t)>,
}
#[test]
fn bindgen_test_layout__cef_resource_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_handler_t>(),
        48usize,
        concat!("Size of: ", stringify!(_cef_resource_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_resource_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).open as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_handler_t>())).process_request as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(process_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_handler_t>())).get_response_headers as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(get_response_headers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).skip as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).read as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_handler_t>())).read_response as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(read_response)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_resource_handler_t>())).cancel as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_handler_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[doc = ""]
pub type cef_resource_handler_t = _cef_resource_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_response_filter_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub init_filter: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_response_filter_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub filter: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_response_filter_t,
            data_in: *mut ::std::os::raw::c_void,
            data_in_size: usize,
            data_in_read: *mut usize,
            data_out: *mut ::std::os::raw::c_void,
            data_out_size: usize,
            data_out_written: *mut usize,
        ) -> cef_response_filter_status_t::Type,
    >,
}
#[test]
fn bindgen_test_layout__cef_response_filter_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_response_filter_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_response_filter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_response_filter_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_response_filter_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_filter_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_filter_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_response_filter_t>())).init_filter as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_filter_t),
            "::",
            stringify!(init_filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_response_filter_t>())).filter as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_response_filter_t),
            "::",
            stringify!(filter)
        )
    );
}
#[doc = ""]
pub type cef_response_filter_t = _cef_response_filter_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_resource_request_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_cookie_access_filter: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_cookie_access_filter_t,
    >,
    #[doc = ""]
    pub on_before_resource_load: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_request_callback_t,
        ) -> cef_return_value_t::Type,
    >,
    #[doc = ""]
    pub get_resource_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_resource_handler_t,
    >,
    #[doc = ""]
    pub on_resource_redirect: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            new_url: *mut cef_string_t,
        ),
    >,
    #[doc = ""]
    pub on_resource_response: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_resource_response_filter: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
        ) -> *mut _cef_response_filter_t,
    >,
    #[doc = ""]
    pub on_resource_load_complete: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            status: cef_urlrequest_status_t::Type,
            received_content_length: int64,
        ),
    >,
    #[doc = ""]
    pub on_protocol_execution: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            allow_os_execution: *mut ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_resource_request_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_request_handler_t>(),
        52usize,
        concat!("Size of: ", stringify!(_cef_resource_request_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_request_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_resource_request_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).get_cookie_access_filter
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(get_cookie_access_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_before_resource_load
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_before_resource_load)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).get_resource_handler
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(get_resource_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_resource_redirect
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_resource_redirect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_resource_response
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_resource_response)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).get_resource_response_filter
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(get_resource_response_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_resource_load_complete
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_resource_load_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_request_handler_t>())).on_protocol_execution
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_request_handler_t),
            "::",
            stringify!(on_protocol_execution)
        )
    );
}
#[doc = ""]
pub type cef_resource_request_handler_t = _cef_resource_request_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_cookie_access_filter_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub can_send_cookie: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            cookie: *const _cef_cookie_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub can_save_cookie: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            cookie: *const _cef_cookie_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_cookie_access_filter_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_cookie_access_filter_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_cookie_access_filter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_cookie_access_filter_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_cookie_access_filter_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_access_filter_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_access_filter_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_access_filter_t>())).can_send_cookie as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_access_filter_t),
            "::",
            stringify!(can_send_cookie)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_cookie_access_filter_t>())).can_save_cookie as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_cookie_access_filter_t),
            "::",
            stringify!(can_save_cookie)
        )
    );
}
#[doc = ""]
pub type cef_cookie_access_filter_t = _cef_cookie_access_filter_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_sslinfo_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_cert_status: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslinfo_t) -> cef_cert_status_t::Type,
    >,
    #[doc = ""]
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_sslinfo_t) -> *mut _cef_x509certificate_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_sslinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_sslinfo_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_sslinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_sslinfo_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_sslinfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_sslinfo_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslinfo_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_sslinfo_t>())).get_cert_status as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslinfo_t),
            "::",
            stringify!(get_cert_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_sslinfo_t>())).get_x509certificate as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_sslinfo_t),
            "::",
            stringify!(get_x509certificate)
        )
    );
}
#[doc = ""]
pub type cef_sslinfo_t = _cef_sslinfo_t;
extern "C" {
    #[doc = ""]
    pub fn cef_is_cert_status_error(status: cef_cert_status_t::Type) -> ::std::os::raw::c_int;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_select_client_certificate_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub select: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_select_client_certificate_callback_t,
            cert: *mut _cef_x509certificate_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_select_client_certificate_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_select_client_certificate_callback_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_cef_select_client_certificate_callback_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_select_client_certificate_callback_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_select_client_certificate_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_select_client_certificate_callback_t>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_select_client_certificate_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_select_client_certificate_callback_t>())).select as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_select_client_certificate_callback_t),
            "::",
            stringify!(select)
        )
    );
}
#[doc = ""]
pub type cef_select_client_certificate_callback_t = _cef_select_client_certificate_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_request_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_before_browse: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            user_gesture: ::std::os::raw::c_int,
            is_redirect: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_open_urlfrom_tab: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t::Type,
            user_gesture: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_resource_request_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            is_navigation: ::std::os::raw::c_int,
            is_download: ::std::os::raw::c_int,
            request_initiator: *const cef_string_t,
            disable_default_handling: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_resource_request_handler_t,
    >,
    #[doc = ""]
    pub get_auth_credentials: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            realm: *const cef_string_t,
            scheme: *const cef_string_t,
            callback: *mut _cef_auth_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_quota_request: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            new_size: int64,
            callback: *mut _cef_request_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_certificate_error: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            cert_error: cef_errorcode_t::Type,
            request_url: *const cef_string_t,
            ssl_info: *mut _cef_sslinfo_t,
            callback: *mut _cef_request_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_select_client_certificate: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            certificatesCount: usize,
            certificates: *const *mut _cef_x509certificate_t,
            callback: *mut _cef_select_client_certificate_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_plugin_crashed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            plugin_path: *const cef_string_t,
        ),
    >,
    #[doc = ""]
    pub on_render_view_ready: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    #[doc = ""]
    pub on_render_process_terminated: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            status: cef_termination_status_t::Type,
        ),
    >,
    #[doc = ""]
    pub on_document_available_in_main_frame: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_request_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_request_handler_t>(),
        64usize,
        concat!("Size of: ", stringify!(_cef_request_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_request_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_request_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_request_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_before_browse as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_before_browse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_open_urlfrom_tab as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_open_urlfrom_tab)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).get_resource_request_handler
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(get_resource_request_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).get_auth_credentials as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(get_auth_credentials)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_quota_request as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_quota_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_certificate_error as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_certificate_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_select_client_certificate
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_select_client_certificate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_plugin_crashed as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_plugin_crashed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_render_view_ready as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_render_view_ready)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_render_process_terminated
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_render_process_terminated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_request_handler_t>())).on_document_available_in_main_frame
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_request_handler_t),
            "::",
            stringify!(on_document_available_in_main_frame)
        )
    );
}
#[doc = ""]
pub type cef_request_handler_t = _cef_request_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_client_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_audio_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_audio_handler_t,
    >,
    #[doc = ""]
    pub get_context_menu_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_context_menu_handler_t,
    >,
    #[doc = ""]
    pub get_dialog_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_dialog_handler_t,
    >,
    #[doc = ""]
    pub get_display_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_display_handler_t,
    >,
    #[doc = ""]
    pub get_download_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_download_handler_t,
    >,
    #[doc = ""]
    pub get_drag_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_drag_handler_t,
    >,
    #[doc = ""]
    pub get_find_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_find_handler_t,
    >,
    #[doc = ""]
    pub get_focus_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_focus_handler_t,
    >,
    #[doc = ""]
    pub get_jsdialog_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_jsdialog_handler_t,
    >,
    #[doc = ""]
    pub get_keyboard_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_keyboard_handler_t,
    >,
    #[doc = ""]
    pub get_life_span_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_life_span_handler_t,
    >,
    #[doc = ""]
    pub get_load_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_load_handler_t,
    >,
    #[doc = ""]
    pub get_render_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_render_handler_t,
    >,
    #[doc = ""]
    pub get_request_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_client_t) -> *mut _cef_request_handler_t,
    >,
    #[doc = ""]
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_client_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t::Type,
            message: *mut _cef_process_message_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_client_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_client_t>(),
        80usize,
        concat!("Size of: ", stringify!(_cef_client_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_client_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_client_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_audio_handler as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_audio_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_context_menu_handler as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_context_menu_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_dialog_handler as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_dialog_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_display_handler as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_display_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_download_handler as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_download_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_drag_handler as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_drag_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_find_handler as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_find_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_focus_handler as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_focus_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_jsdialog_handler as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_jsdialog_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_keyboard_handler as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_keyboard_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_life_span_handler as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_life_span_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_client_t>())).get_load_handler as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_load_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_render_handler as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_render_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).get_request_handler as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(get_request_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_client_t>())).on_process_message_received as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_client_t),
            "::",
            stringify!(on_process_message_received)
        )
    );
}
#[doc = ""]
pub type cef_client_t = _cef_client_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_command_line_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub copy: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> *mut _cef_command_line_t,
    >,
    #[doc = ""]
    pub init_from_argv: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_command_line_t,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
        ),
    >,
    #[doc = ""]
    pub init_from_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_command_line_t,
            command_line: *const cef_string_t,
        ),
    >,
    #[doc = ""]
    pub reset: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t)>,
    #[doc = ""]
    pub get_argv: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, argv: cef_string_list_t),
    >,
    #[doc = ""]
    pub get_command_line_string: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_program: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub set_program: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, program: *const cef_string_t),
    >,
    #[doc = ""]
    pub has_switches: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub has_switch: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_switch_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_switches: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, switches: cef_string_map_t),
    >,
    #[doc = ""]
    pub append_switch: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, name: *const cef_string_t),
    >,
    #[doc = ""]
    pub append_switch_with_value: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
        ),
    >,
    #[doc = ""]
    pub has_arguments: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_arguments: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, arguments: cef_string_list_t),
    >,
    #[doc = ""]
    pub append_argument: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, argument: *const cef_string_t),
    >,
    #[doc = ""]
    pub prepend_wrapper: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_command_line_t, wrapper: *const cef_string_t),
    >,
}
#[test]
fn bindgen_test_layout__cef_command_line_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_command_line_t>(),
        100usize,
        concat!("Size of: ", stringify!(_cef_command_line_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_command_line_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_command_line_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).is_valid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).is_read_only as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).copy as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).init_from_argv as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(init_from_argv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).init_from_string as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(init_from_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).reset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).get_argv as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_argv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).get_command_line_string as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_command_line_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).get_program as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_program)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).set_program as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(set_program)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).has_switches as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(has_switches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_command_line_t>())).has_switch as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(has_switch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).get_switch_value as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_switch_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).get_switches as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_switches)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).append_switch as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(append_switch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).append_switch_with_value as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(append_switch_with_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).has_arguments as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(has_arguments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).get_arguments as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(get_arguments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).append_argument as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(append_argument)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_command_line_t>())).prepend_wrapper as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_command_line_t),
            "::",
            stringify!(prepend_wrapper)
        )
    );
}
#[doc = ""]
pub type cef_command_line_t = _cef_command_line_t;
extern "C" {
    #[doc = ""]
    pub fn cef_command_line_create() -> *mut cef_command_line_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_command_line_get_global() -> *mut cef_command_line_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_print_settings_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_read_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_orientation: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            landscape: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub is_landscape: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_printer_printable_area: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            physical_size_device_units: *const cef_size_t,
            printable_area_device_units: *const cef_rect_t,
            landscape_needs_flip: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub set_device_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t, name: *const cef_string_t),
    >,
    #[doc = ""]
    pub get_device_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub set_dpi: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t, dpi: ::std::os::raw::c_int),
    >,
    #[doc = ""]
    pub get_dpi: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_page_ranges: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: usize,
            ranges: *const cef_range_t,
        ),
    >,
    #[doc = ""]
    pub get_page_ranges_count: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> usize,
    >,
    #[doc = ""]
    pub get_page_ranges: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: *mut usize,
            ranges: *mut cef_range_t,
        ),
    >,
    #[doc = ""]
    pub set_selection_only: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            selection_only: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub is_selection_only: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_collate: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            collate: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub will_collate: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_color_model: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            model: cef_color_model_t::Type,
        ),
    >,
    #[doc = ""]
    pub get_color_model: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> cef_color_model_t::Type,
    >,
    #[doc = ""]
    pub set_copies: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            copies: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub get_copies: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_duplex_mode: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_settings_t,
            mode: cef_duplex_mode_t::Type,
        ),
    >,
    #[doc = ""]
    pub get_duplex_mode: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_settings_t) -> cef_duplex_mode_t::Type,
    >,
}
#[test]
fn bindgen_test_layout__cef_print_settings_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_print_settings_t>(),
        108usize,
        concat!("Size of: ", stringify!(_cef_print_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_print_settings_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_print_settings_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).is_valid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).is_read_only as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(is_read_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_orientation as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_orientation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).is_landscape as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(is_landscape)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_printer_printable_area as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_printer_printable_area)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_device_name as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_device_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_device_name as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_device_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).set_dpi as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_dpi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_settings_t>())).get_dpi as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_dpi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_page_ranges as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_page_ranges)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_page_ranges_count as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_page_ranges_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_page_ranges as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_page_ranges)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_selection_only as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_selection_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).is_selection_only as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(is_selection_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_collate as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_collate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).will_collate as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(will_collate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_color_model as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_color_model)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_color_model as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_color_model)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_copies as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_copies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_copies as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_copies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).set_duplex_mode as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(set_duplex_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_settings_t>())).get_duplex_mode as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_settings_t),
            "::",
            stringify!(get_duplex_mode)
        )
    );
}
#[doc = ""]
pub type cef_print_settings_t = _cef_print_settings_t;
extern "C" {
    #[doc = ""]
    pub fn cef_print_settings_create() -> *mut cef_print_settings_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_print_dialog_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub cont: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_dialog_callback_t,
            settings: *mut _cef_print_settings_t,
        ),
    >,
    #[doc = ""]
    pub cancel:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_print_dialog_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_print_dialog_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_print_dialog_callback_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_print_dialog_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_print_dialog_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_print_dialog_callback_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_dialog_callback_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_dialog_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_dialog_callback_t>())).cont as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_dialog_callback_t),
            "::",
            stringify!(cont)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_dialog_callback_t>())).cancel as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_dialog_callback_t),
            "::",
            stringify!(cancel)
        )
    );
}
#[doc = ""]
pub type cef_print_dialog_callback_t = _cef_print_dialog_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_print_job_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub cont:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_print_job_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_print_job_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_print_job_callback_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_print_job_callback_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_print_job_callback_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_print_job_callback_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_job_callback_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_job_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_job_callback_t>())).cont as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_job_callback_t),
            "::",
            stringify!(cont)
        )
    );
}
#[doc = ""]
pub type cef_print_job_callback_t = _cef_print_job_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_print_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_print_start: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t),
    >,
    #[doc = ""]
    pub on_print_settings: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            settings: *mut _cef_print_settings_t,
            get_defaults: ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub on_print_dialog: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            has_selection: ::std::os::raw::c_int,
            callback: *mut _cef_print_dialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_print_job: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            document_name: *const cef_string_t,
            pdf_file_path: *const cef_string_t,
            callback: *mut _cef_print_job_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub on_print_reset: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t),
    >,
    #[doc = ""]
    pub get_pdf_paper_size: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_print_handler_t,
            device_units_per_inch: ::std::os::raw::c_int,
        ) -> cef_size_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_print_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_print_handler_t>(),
        44usize,
        concat!("Size of: ", stringify!(_cef_print_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_print_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_print_handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_print_handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_start as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_settings as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_settings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_dialog as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_dialog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_job as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_job)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).on_print_reset as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(on_print_reset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_print_handler_t>())).get_pdf_paper_size as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_print_handler_t),
            "::",
            stringify!(get_pdf_paper_size)
        )
    );
}
#[doc = ""]
pub type cef_print_handler_t = _cef_print_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_browser_process_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_cookieable_schemes: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_process_handler_t,
            schemes: cef_string_list_t,
            include_defaults: *mut ::std::os::raw::c_int,
        ),
    >,
    #[doc = ""]
    pub on_context_initialized: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_process_handler_t),
    >,
    #[doc = ""]
    pub on_before_child_process_launch: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_process_handler_t,
            command_line: *mut _cef_command_line_t,
        ),
    >,
    #[doc = ""]
    pub get_print_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_process_handler_t,
        ) -> *mut _cef_print_handler_t,
    >,
    #[doc = ""]
    pub on_schedule_message_pump_work: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_browser_process_handler_t, delay_ms: int64),
    >,
    #[doc = ""]
    pub get_default_client: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_browser_process_handler_t,
        ) -> *mut _cef_client_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_browser_process_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_browser_process_handler_t>(),
        44usize,
        concat!("Size of: ", stringify!(_cef_browser_process_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_browser_process_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_browser_process_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).get_cookieable_schemes
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(get_cookieable_schemes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).on_context_initialized
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(on_context_initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>()))
                .on_before_child_process_launch as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(on_before_child_process_launch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).get_print_handler as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(get_print_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).on_schedule_message_pump_work
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(on_schedule_message_pump_work)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_browser_process_handler_t>())).get_default_client
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_browser_process_handler_t),
            "::",
            stringify!(get_default_client)
        )
    );
}
#[doc = ""]
pub type cef_browser_process_handler_t = _cef_browser_process_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_task_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub execute: ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_task_t)>,
}
#[test]
fn bindgen_test_layout__cef_task_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_task_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_task_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_task_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_task_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_t>())).execute as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_t),
            "::",
            stringify!(execute)
        )
    );
}
#[doc = ""]
pub type cef_task_t = _cef_task_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_task_runner_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_task_runner_t,
            that: *mut _cef_task_runner_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub belongs_to_current_thread: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_task_runner_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub belongs_to_thread: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_task_runner_t,
            threadId: cef_thread_id_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub post_task: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub post_delayed_task: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t,
            delay_ms: int64,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_task_runner_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_task_runner_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_task_runner_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_task_runner_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_task_runner_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_runner_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_runner_t>())).is_same as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_task_runner_t>())).belongs_to_current_thread as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(belongs_to_current_thread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_task_runner_t>())).belongs_to_thread as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(belongs_to_thread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_task_runner_t>())).post_task as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(post_task)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_task_runner_t>())).post_delayed_task as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_task_runner_t),
            "::",
            stringify!(post_delayed_task)
        )
    );
}
#[doc = ""]
pub type cef_task_runner_t = _cef_task_runner_t;
extern "C" {
    #[doc = ""]
    pub fn cef_task_runner_get_for_current_thread() -> *mut cef_task_runner_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_task_runner_get_for_thread(
        threadId: cef_thread_id_t::Type,
    ) -> *mut cef_task_runner_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_currently_on(threadId: cef_thread_id_t::Type) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_post_task(
        threadId: cef_thread_id_t::Type, task: *mut cef_task_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_post_delayed_task(
        threadId: cef_thread_id_t::Type, task: *mut cef_task_t, delay_ms: int64,
    ) -> ::std::os::raw::c_int;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_v8context_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_task_runner: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> *mut _cef_task_runner_t,
    >,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_browser: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> *mut _cef_browser_t,
    >,
    #[doc = ""]
    pub get_frame: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> *mut _cef_frame_t,
    >,
    #[doc = ""]
    pub get_global: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> *mut _cef_v8value_t,
    >,
    #[doc = ""]
    pub enter: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub exit: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8context_t,
            that: *mut _cef_v8context_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub eval: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8context_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut *mut _cef_v8exception_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8context_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8context_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_v8context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8context_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_v8context_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8context_t>())).get_task_runner as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(get_task_runner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).is_valid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).get_browser as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(get_browser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).get_frame as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(get_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).get_global as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(get_global)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).enter as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(enter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).exit as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(exit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).is_same as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8context_t>())).eval as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8context_t),
            "::",
            stringify!(eval)
        )
    );
}
#[doc = ""]
pub type cef_v8context_t = _cef_v8context_t;
extern "C" {
    #[doc = ""]
    pub fn cef_v8context_get_current_context() -> *mut cef_v8context_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_v8context_get_entered_context() -> *mut cef_v8context_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_v8context_in_context() -> ::std::os::raw::c_int;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_v8handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub execute: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8handler_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8handler_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_v8handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_v8handler_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8handler_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8handler_t>())).execute as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8handler_t),
            "::",
            stringify!(execute)
        )
    );
}
#[doc = ""]
pub type cef_v8handler_t = _cef_v8handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_v8accessor_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8accessor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8accessor_t>(),
        28usize,
        concat!("Size of: ", stringify!(_cef_v8accessor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8accessor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_v8accessor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8accessor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8accessor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8accessor_t>())).get as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8accessor_t),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8accessor_t>())).set as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8accessor_t),
            "::",
            stringify!(set)
        )
    );
}
#[doc = ""]
pub type cef_v8accessor_t = _cef_v8accessor_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_v8interceptor_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_byname: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_byindex: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_byname: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_byindex: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8interceptor_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8interceptor_t>(),
        36usize,
        concat!("Size of: ", stringify!(_cef_v8interceptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8interceptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_v8interceptor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8interceptor_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8interceptor_t>())).get_byname as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(get_byname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8interceptor_t>())).get_byindex as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(get_byindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8interceptor_t>())).set_byname as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(set_byname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8interceptor_t>())).set_byindex as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8interceptor_t),
            "::",
            stringify!(set_byindex)
        )
    );
}
#[doc = ""]
pub type cef_v8interceptor_t = _cef_v8interceptor_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_v8exception_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_message: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_source_line: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_script_resource_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_line_number: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_start_position: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_end_position: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_start_column: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_end_column: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8exception_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8exception_t>(),
        52usize,
        concat!("Size of: ", stringify!(_cef_v8exception_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8exception_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_v8exception_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8exception_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8exception_t>())).get_message as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_source_line as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_source_line)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_script_resource_name as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_script_resource_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_line_number as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_line_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_start_position as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_start_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_end_position as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_end_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_start_column as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_start_column)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8exception_t>())).get_end_column as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8exception_t),
            "::",
            stringify!(get_end_column)
        )
    );
}
#[doc = ""]
pub type cef_v8exception_t = _cef_v8exception_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_v8array_buffer_release_callback_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub release_buffer: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8array_buffer_release_callback_t,
            buffer: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout__cef_v8array_buffer_release_callback_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8array_buffer_release_callback_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_cef_v8array_buffer_release_callback_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8array_buffer_release_callback_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_cef_v8array_buffer_release_callback_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8array_buffer_release_callback_t>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8array_buffer_release_callback_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8array_buffer_release_callback_t>())).release_buffer
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8array_buffer_release_callback_t),
            "::",
            stringify!(release_buffer)
        )
    );
}
#[doc = ""]
pub type cef_v8array_buffer_release_callback_t = _cef_v8array_buffer_release_callback_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_v8value_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_undefined: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_null: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_bool: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_int: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_uint: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_double: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_date: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_string: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_object: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_array: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_array_buffer: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_function: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_same: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            that: *mut _cef_v8value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_bool_value: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_int_value:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> int32>,
    #[doc = ""]
    pub get_uint_value:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> uint32>,
    #[doc = ""]
    pub get_double_value:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> f64>,
    #[doc = ""]
    pub get_date_value:
        ::std::option::Option<unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> cef_time_t>,
    #[doc = ""]
    pub get_string_value: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub is_user_created: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub has_exception: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_exception: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8exception_t,
    >,
    #[doc = ""]
    pub clear_exception: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub will_rethrow_exceptions: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_rethrow_exceptions: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            rethrow: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub has_value_bykey: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub has_value_byindex: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub delete_value_bykey: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub delete_value_byindex: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_value_bykey: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_v8value_t,
    >,
    #[doc = ""]
    pub get_value_byindex: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_v8value_t,
    >,
    #[doc = ""]
    pub set_value_bykey: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            value: *mut _cef_v8value_t,
            attribute: cef_v8_propertyattribute_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_value_byindex: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
            value: *mut _cef_v8value_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_value_byaccessor: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            settings: cef_v8_accesscontrol_t::Type,
            attribute: cef_v8_propertyattribute_t::Type,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_keys: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            keys: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub set_user_data: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            user_data: *mut _cef_base_ref_counted_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_user_data: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> *mut _cef_base_ref_counted_t,
    >,
    #[doc = ""]
    pub get_externally_allocated_memory: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub adjust_externally_allocated_memory: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            change_in_bytes: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_array_length: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_array_buffer_release_callback: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
        ) -> *mut _cef_v8array_buffer_release_callback_t,
    >,
    #[doc = ""]
    pub neuter_array_buffer: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_function_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_function_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8handler_t,
    >,
    #[doc = ""]
    pub execute_function: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
        ) -> *mut _cef_v8value_t,
    >,
    #[doc = ""]
    pub execute_function_with_context: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8value_t,
            context: *mut _cef_v8context_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
        ) -> *mut _cef_v8value_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8value_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8value_t>(),
        208usize,
        concat!("Size of: ", stringify!(_cef_v8value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8value_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_v8value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_valid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_undefined as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_undefined)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_null as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_bool as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_int as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_uint as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_uint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_double as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_date as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_string as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_object as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_array as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_array_buffer as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_array_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_function as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_same as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_same)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_bool_value as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_bool_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_int_value as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_int_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_uint_value as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_uint_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_double_value as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_double_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_date_value as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_date_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_string_value as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_string_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).is_user_created as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(is_user_created)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).has_exception as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(has_exception)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_exception as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_exception)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).clear_exception as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(clear_exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).will_rethrow_exceptions as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(will_rethrow_exceptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).set_rethrow_exceptions as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_rethrow_exceptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).has_value_bykey as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(has_value_bykey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).has_value_byindex as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(has_value_byindex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).delete_value_bykey as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(delete_value_bykey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).delete_value_byindex as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(delete_value_byindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_value_bykey as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_value_bykey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_value_byindex as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_value_byindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).set_value_bykey as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_value_bykey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).set_value_byindex as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_value_byindex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).set_value_byaccessor as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_value_byaccessor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_keys as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).set_user_data as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(set_user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_user_data as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_user_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_externally_allocated_memory as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_externally_allocated_memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).adjust_externally_allocated_memory
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(adjust_externally_allocated_memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).get_array_length as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_array_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_array_buffer_release_callback as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_array_buffer_release_callback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).neuter_array_buffer as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(neuter_array_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_function_name as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_function_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).get_function_handler as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(get_function_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8value_t>())).execute_function as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(execute_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8value_t>())).execute_function_with_context as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8value_t),
            "::",
            stringify!(execute_function_with_context)
        )
    );
}
#[doc = ""]
pub type cef_v8value_t = _cef_v8value_t;
extern "C" {
    #[doc = ""]
    pub fn cef_v8value_create_undefined() -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_v8value_create_null() -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_v8value_create_bool(value: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_v8value_create_int(value: int32) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_v8value_create_uint(value: uint32) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_v8value_create_double(value: f64) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_v8value_create_date(date: *const cef_time_t) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_v8value_create_string(value: *const cef_string_t) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_v8value_create_object(
        accessor: *mut cef_v8accessor_t, interceptor: *mut cef_v8interceptor_t,
    ) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_v8value_create_array(length: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_v8value_create_array_buffer(
        buffer: *mut ::std::os::raw::c_void, length: usize,
        release_callback: *mut cef_v8array_buffer_release_callback_t,
    ) -> *mut cef_v8value_t;
}
extern "C" {
    #[doc = ""]
    pub fn cef_v8value_create_function(
        name: *const cef_string_t, handler: *mut cef_v8handler_t,
    ) -> *mut cef_v8value_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_v8stack_trace_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_frame_count: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_frame: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_v8stack_trace_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_v8stack_frame_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8stack_trace_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8stack_trace_t>(),
        32usize,
        concat!("Size of: ", stringify!(_cef_v8stack_trace_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8stack_trace_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_v8stack_trace_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_trace_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_trace_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_trace_t>())).is_valid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_trace_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_trace_t>())).get_frame_count as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_trace_t),
            "::",
            stringify!(get_frame_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_trace_t>())).get_frame as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_trace_t),
            "::",
            stringify!(get_frame)
        )
    );
}
#[doc = ""]
pub type cef_v8stack_trace_t = _cef_v8stack_trace_t;
extern "C" {
    #[doc = ""]
    pub fn cef_v8stack_trace_get_current(
        frame_limit: ::std::os::raw::c_int,
    ) -> *mut cef_v8stack_trace_t;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_v8stack_frame_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub is_valid: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_script_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_script_name_or_source_url: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_function_name: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    #[doc = ""]
    pub get_line_number: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_column: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_eval: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub is_constructor: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_v8stack_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_v8stack_frame_t>(),
        52usize,
        concat!("Size of: ", stringify!(_cef_v8stack_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_v8stack_frame_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_v8stack_frame_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).is_valid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(is_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_script_name as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_script_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_script_name_or_source_url
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_script_name_or_source_url)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_function_name as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_function_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_line_number as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_line_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).get_column as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(get_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).is_eval as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(is_eval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_v8stack_frame_t>())).is_constructor as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_v8stack_frame_t),
            "::",
            stringify!(is_constructor)
        )
    );
}
#[doc = ""]
pub type cef_v8stack_frame_t = _cef_v8stack_frame_t;
extern "C" {
    #[doc = ""]
    pub fn cef_register_extension(
        extension_name: *const cef_string_t, javascript_code: *const cef_string_t,
        handler: *mut cef_v8handler_t,
    ) -> ::std::os::raw::c_int;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_render_process_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_web_kit_initialized: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_render_process_handler_t),
    >,
    #[doc = ""]
    pub on_browser_created: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            extra_info: *mut _cef_dictionary_value_t,
        ),
    >,
    #[doc = ""]
    pub on_browser_destroyed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    #[doc = ""]
    pub get_load_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
        ) -> *mut _cef_load_handler_t,
    >,
    #[doc = ""]
    pub on_context_created: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
        ),
    >,
    #[doc = ""]
    pub on_context_released: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
        ),
    >,
    #[doc = ""]
    pub on_uncaught_exception: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
            exception: *mut _cef_v8exception_t,
            stackTrace: *mut _cef_v8stack_trace_t,
        ),
    >,
    #[doc = ""]
    pub on_focused_node_changed: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            node: *mut _cef_domnode_t,
        ),
    >,
    #[doc = ""]
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t::Type,
            message: *mut _cef_process_message_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_render_process_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_render_process_handler_t>(),
        56usize,
        concat!("Size of: ", stringify!(_cef_render_process_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_render_process_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_render_process_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_web_kit_initialized
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_web_kit_initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_browser_created as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_browser_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_browser_destroyed
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_browser_destroyed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).get_load_handler as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(get_load_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_context_created as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_context_created)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_context_released
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_context_released)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_uncaught_exception
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_uncaught_exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_focused_node_changed
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_focused_node_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_render_process_handler_t>())).on_process_message_received
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_render_process_handler_t),
            "::",
            stringify!(on_process_message_received)
        )
    );
}
#[doc = ""]
pub type cef_render_process_handler_t = _cef_render_process_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_resource_bundle_handler_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub get_localized_string: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            string_id: ::std::os::raw::c_int,
            string: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_data_resource: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = ""]
    pub get_data_resource_for_scale: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            scale_factor: cef_scale_factor_t::Type,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_resource_bundle_handler_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_resource_bundle_handler_t>(),
        32usize,
        concat!("Size of: ", stringify!(_cef_resource_bundle_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_resource_bundle_handler_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_resource_bundle_handler_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_bundle_handler_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_bundle_handler_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_bundle_handler_t>())).get_localized_string
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_bundle_handler_t),
            "::",
            stringify!(get_localized_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_bundle_handler_t>())).get_data_resource as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_bundle_handler_t),
            "::",
            stringify!(get_data_resource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_resource_bundle_handler_t>())).get_data_resource_for_scale
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_resource_bundle_handler_t),
            "::",
            stringify!(get_data_resource_for_scale)
        )
    );
}
#[doc = ""]
pub type cef_resource_bundle_handler_t = _cef_resource_bundle_handler_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_scheme_registrar_t {
    #[doc = ""]
    pub base: cef_base_scoped_t,
    #[doc = ""]
    pub add_custom_scheme: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_scheme_registrar_t,
            scheme_name: *const cef_string_t,
            options: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__cef_scheme_registrar_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_scheme_registrar_t>(),
        12usize,
        concat!("Size of: ", stringify!(_cef_scheme_registrar_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_scheme_registrar_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_scheme_registrar_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_scheme_registrar_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_scheme_registrar_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_scheme_registrar_t>())).add_custom_scheme as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_scheme_registrar_t),
            "::",
            stringify!(add_custom_scheme)
        )
    );
}
#[doc = ""]
pub type cef_scheme_registrar_t = _cef_scheme_registrar_t;
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_scheme_handler_factory_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub create: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_scheme_handler_factory_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            scheme_name: *const cef_string_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_resource_handler_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_scheme_handler_factory_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_scheme_handler_factory_t>(),
        24usize,
        concat!("Size of: ", stringify!(_cef_scheme_handler_factory_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_scheme_handler_factory_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_scheme_handler_factory_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_scheme_handler_factory_t>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_scheme_handler_factory_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_scheme_handler_factory_t>())).create as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_scheme_handler_factory_t),
            "::",
            stringify!(create)
        )
    );
}
#[doc = ""]
pub type cef_scheme_handler_factory_t = _cef_scheme_handler_factory_t;
extern "C" {
    #[doc = ""]
    pub fn cef_register_scheme_handler_factory(
        scheme_name: *const cef_string_t, domain_name: *const cef_string_t,
        factory: *mut cef_scheme_handler_factory_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_clear_scheme_handler_factories() -> ::std::os::raw::c_int;
}
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_app_t {
    #[doc = ""]
    pub base: cef_base_ref_counted_t,
    #[doc = ""]
    pub on_before_command_line_processing: ::std::option::Option<
        unsafe extern "stdcall" fn(
            self_: *mut _cef_app_t,
            process_type: *const cef_string_t,
            command_line: *mut _cef_command_line_t,
        ),
    >,
    #[doc = ""]
    pub on_register_custom_schemes: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_app_t, registrar: *mut _cef_scheme_registrar_t),
    >,
    #[doc = ""]
    pub get_resource_bundle_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_app_t) -> *mut _cef_resource_bundle_handler_t,
    >,
    #[doc = ""]
    pub get_browser_process_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_app_t) -> *mut _cef_browser_process_handler_t,
    >,
    #[doc = ""]
    pub get_render_process_handler: ::std::option::Option<
        unsafe extern "stdcall" fn(self_: *mut _cef_app_t) -> *mut _cef_render_process_handler_t,
    >,
}
#[test]
fn bindgen_test_layout__cef_app_t() {
    assert_eq!(
        ::std::mem::size_of::<_cef_app_t>(),
        40usize,
        concat!("Size of: ", stringify!(_cef_app_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_cef_app_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_cef_app_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cef_app_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).on_before_command_line_processing as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(on_before_command_line_processing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).on_register_custom_schemes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(on_register_custom_schemes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).get_resource_bundle_handler as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(get_resource_bundle_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).get_browser_process_handler as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(get_browser_process_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cef_app_t>())).get_render_process_handler as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_cef_app_t),
            "::",
            stringify!(get_render_process_handler)
        )
    );
}
#[doc = ""]
pub type cef_app_t = _cef_app_t;
extern "C" {
    #[doc = ""]
    pub fn cef_execute_process(
        args: *const _cef_main_args_t, application: *mut cef_app_t,
        windows_sandbox_info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_initialize(
        args: *const _cef_main_args_t, settings: *const _cef_settings_t,
        application: *mut cef_app_t, windows_sandbox_info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn cef_shutdown();
}
extern "C" {
    #[doc = ""]
    pub fn cef_do_message_loop_work();
}
extern "C" {
    #[doc = ""]
    pub fn cef_run_message_loop();
}
extern "C" {
    #[doc = ""]
    pub fn cef_quit_message_loop();
}
extern "C" {
    #[doc = ""]
    pub fn cef_set_osmodal_loop(osModalLoop: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = ""]
    pub fn cef_enable_highdpi_support();
}
